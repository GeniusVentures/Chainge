/**
 * Open API
 * Open API
 *
 * The version of the OpenAPI document: 1.0
 * Contact: liuxiaobin@chainge.finance
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.5.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "CppRestOpenAPIClient/model/AppBindAddressParameters.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

AppBindAddressParameters::AppBindAddressParameters() {
  m_BindAddress = utility::conversions::to_string_t("");
  m_BindAddressIsSet = false;
  m_BindChain = utility::conversions::to_string_t("");
  m_BindChainIsSet = false;
  m_EvmAddress = utility::conversions::to_string_t("");
  m_EvmAddressIsSet = false;
  m_Signature = utility::conversions::to_string_t("");
  m_SignatureIsSet = false;
}

AppBindAddressParameters::~AppBindAddressParameters() {}

void AppBindAddressParameters::validate() {
  // TODO: implement validation
}

web::json::value AppBindAddressParameters::toJson() const {

  web::json::value val = web::json::value::object();

  if (m_BindAddressIsSet) {
    val[utility::conversions::to_string_t(U("bindAddress"))] =
        ModelBase::toJson(m_BindAddress);
  }
  if (m_BindChainIsSet) {
    val[utility::conversions::to_string_t(U("bindChain"))] =
        ModelBase::toJson(m_BindChain);
  }
  if (m_EvmAddressIsSet) {
    val[utility::conversions::to_string_t(U("evmAddress"))] =
        ModelBase::toJson(m_EvmAddress);
  }
  if (m_SignatureIsSet) {
    val[utility::conversions::to_string_t(U("signature"))] =
        ModelBase::toJson(m_Signature);
  }

  return val;
}

bool AppBindAddressParameters::fromJson(const web::json::value &val) {
  bool ok = true;

  if (val.has_field(utility::conversions::to_string_t(U("bindAddress")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("bindAddress")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setBindAddress;
      ok &= ModelBase::fromJson(fieldValue, refVal_setBindAddress);
      setBindAddress(refVal_setBindAddress);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("bindChain")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("bindChain")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setBindChain;
      ok &= ModelBase::fromJson(fieldValue, refVal_setBindChain);
      setBindChain(refVal_setBindChain);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("evmAddress")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("evmAddress")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setEvmAddress;
      ok &= ModelBase::fromJson(fieldValue, refVal_setEvmAddress);
      setEvmAddress(refVal_setEvmAddress);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("signature")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("signature")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setSignature;
      ok &= ModelBase::fromJson(fieldValue, refVal_setSignature);
      setSignature(refVal_setSignature);
    }
  }
  return ok;
}

void AppBindAddressParameters::toMultipart(
    std::shared_ptr<MultipartFormData> multipart,
    const utility::string_t &prefix) const {
  utility::string_t namePrefix = prefix;
  if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                   utility::conversions::to_string_t(U("."))) {
    namePrefix += utility::conversions::to_string_t(U("."));
  }
  if (m_BindAddressIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("bindAddress")),
        m_BindAddress));
  }
  if (m_BindChainIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("bindChain")),
        m_BindChain));
  }
  if (m_EvmAddressIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("evmAddress")),
        m_EvmAddress));
  }
  if (m_SignatureIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("signature")),
        m_Signature));
  }
}

bool AppBindAddressParameters::fromMultiPart(
    std::shared_ptr<MultipartFormData> multipart,
    const utility::string_t &prefix) {
  bool ok = true;
  utility::string_t namePrefix = prefix;
  if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                   utility::conversions::to_string_t(U("."))) {
    namePrefix += utility::conversions::to_string_t(U("."));
  }

  if (multipart->hasContent(
          utility::conversions::to_string_t(U("bindAddress")))) {
    utility::string_t refVal_setBindAddress;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("bindAddress"))),
        refVal_setBindAddress);
    setBindAddress(refVal_setBindAddress);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("bindChain")))) {
    utility::string_t refVal_setBindChain;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("bindChain"))),
        refVal_setBindChain);
    setBindChain(refVal_setBindChain);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("evmAddress")))) {
    utility::string_t refVal_setEvmAddress;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("evmAddress"))),
        refVal_setEvmAddress);
    setEvmAddress(refVal_setEvmAddress);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("signature")))) {
    utility::string_t refVal_setSignature;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("signature"))),
        refVal_setSignature);
    setSignature(refVal_setSignature);
  }
  return ok;
}

utility::string_t AppBindAddressParameters::getBindAddress() const {
  return m_BindAddress;
}

void AppBindAddressParameters::setBindAddress(const utility::string_t &value) {
  m_BindAddress = value;
  m_BindAddressIsSet = true;
}

bool AppBindAddressParameters::bindAddressIsSet() const {
  return m_BindAddressIsSet;
}

void AppBindAddressParameters::unsetBindAddress() {
  m_BindAddressIsSet = false;
}
utility::string_t AppBindAddressParameters::getBindChain() const {
  return m_BindChain;
}

void AppBindAddressParameters::setBindChain(const utility::string_t &value) {
  m_BindChain = value;
  m_BindChainIsSet = true;
}

bool AppBindAddressParameters::bindChainIsSet() const {
  return m_BindChainIsSet;
}

void AppBindAddressParameters::unsetBindChain() { m_BindChainIsSet = false; }
utility::string_t AppBindAddressParameters::getEvmAddress() const {
  return m_EvmAddress;
}

void AppBindAddressParameters::setEvmAddress(const utility::string_t &value) {
  m_EvmAddress = value;
  m_EvmAddressIsSet = true;
}

bool AppBindAddressParameters::evmAddressIsSet() const {
  return m_EvmAddressIsSet;
}

void AppBindAddressParameters::unsetEvmAddress() { m_EvmAddressIsSet = false; }
utility::string_t AppBindAddressParameters::getSignature() const {
  return m_Signature;
}

void AppBindAddressParameters::setSignature(const utility::string_t &value) {
  m_Signature = value;
  m_SignatureIsSet = true;
}

bool AppBindAddressParameters::signatureIsSet() const {
  return m_SignatureIsSet;
}

void AppBindAddressParameters::unsetSignature() { m_SignatureIsSet = false; }
} // namespace model
} // namespace client
} // namespace openapitools
} // namespace org
