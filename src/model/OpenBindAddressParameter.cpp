/**
 * Open API
 * Open API
 *
 * The version of the OpenAPI document: 1.0
 * Contact: liuxiaobin@chainge.finance
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.5.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "CppRestOpenAPIClient/model/OpenBindAddressParameter.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

OpenBindAddressParameter::OpenBindAddressParameter() {
  m_FeeLevel = 0;
  m_FeeLevelIsSet = false;
  m_FeeToAddress = utility::conversions::to_string_t("");
  m_FeeToAddressIsSet = false;
}

OpenBindAddressParameter::~OpenBindAddressParameter() {}

void OpenBindAddressParameter::validate() {
  // TODO: implement validation
}

web::json::value OpenBindAddressParameter::toJson() const {

  web::json::value val = web::json::value::object();

  if (m_FeeLevelIsSet) {
    val[utility::conversions::to_string_t(U("feeLevel"))] =
        ModelBase::toJson(m_FeeLevel);
  }
  if (m_FeeToAddressIsSet) {
    val[utility::conversions::to_string_t(U("feeToAddress"))] =
        ModelBase::toJson(m_FeeToAddress);
  }

  return val;
}

bool OpenBindAddressParameter::fromJson(const web::json::value &val) {
  bool ok = true;

  if (val.has_field(utility::conversions::to_string_t(U("feeLevel")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("feeLevel")));
    if (!fieldValue.is_null()) {
      int32_t refVal_setFeeLevel;
      ok &= ModelBase::fromJson(fieldValue, refVal_setFeeLevel);
      setFeeLevel(refVal_setFeeLevel);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("feeToAddress")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("feeToAddress")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setFeeToAddress;
      ok &= ModelBase::fromJson(fieldValue, refVal_setFeeToAddress);
      setFeeToAddress(refVal_setFeeToAddress);
    }
  }
  return ok;
}

void OpenBindAddressParameter::toMultipart(
    std::shared_ptr<MultipartFormData> multipart,
    const utility::string_t &prefix) const {
  utility::string_t namePrefix = prefix;
  if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                   utility::conversions::to_string_t(U("."))) {
    namePrefix += utility::conversions::to_string_t(U("."));
  }
  if (m_FeeLevelIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("feeLevel")),
        m_FeeLevel));
  }
  if (m_FeeToAddressIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("feeToAddress")),
        m_FeeToAddress));
  }
}

bool OpenBindAddressParameter::fromMultiPart(
    std::shared_ptr<MultipartFormData> multipart,
    const utility::string_t &prefix) {
  bool ok = true;
  utility::string_t namePrefix = prefix;
  if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                   utility::conversions::to_string_t(U("."))) {
    namePrefix += utility::conversions::to_string_t(U("."));
  }

  if (multipart->hasContent(utility::conversions::to_string_t(U("feeLevel")))) {
    int32_t refVal_setFeeLevel;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("feeLevel"))),
        refVal_setFeeLevel);
    setFeeLevel(refVal_setFeeLevel);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("feeToAddress")))) {
    utility::string_t refVal_setFeeToAddress;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("feeToAddress"))),
        refVal_setFeeToAddress);
    setFeeToAddress(refVal_setFeeToAddress);
  }
  return ok;
}

int32_t OpenBindAddressParameter::getFeeLevel() const { return m_FeeLevel; }

void OpenBindAddressParameter::setFeeLevel(int32_t value) {
  m_FeeLevel = value;
  m_FeeLevelIsSet = true;
}

bool OpenBindAddressParameter::feeLevelIsSet() const { return m_FeeLevelIsSet; }

void OpenBindAddressParameter::unsetFeeLevel() { m_FeeLevelIsSet = false; }
utility::string_t OpenBindAddressParameter::getFeeToAddress() const {
  return m_FeeToAddress;
}

void OpenBindAddressParameter::setFeeToAddress(const utility::string_t &value) {
  m_FeeToAddress = value;
  m_FeeToAddressIsSet = true;
}

bool OpenBindAddressParameter::feeToAddressIsSet() const {
  return m_FeeToAddressIsSet;
}

void OpenBindAddressParameter::unsetFeeToAddress() {
  m_FeeToAddressIsSet = false;
}
} // namespace model
} // namespace client
} // namespace openapitools
} // namespace org
