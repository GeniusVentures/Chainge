/**
 * Open API
 * Open API
 *
 * The version of the OpenAPI document: 1.0
 * Contact: liuxiaobin@chainge.finance
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.5.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "CppRestOpenAPIClient/model/OpenAPIAndChainSubmitCheckProxyOrder.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

OpenAPIAndChainSubmitCheckProxyOrder::OpenAPIAndChainSubmitCheckProxyOrder() {
  m_CertHash = utility::conversions::to_string_t("");
  m_CertHashIsSet = false;
}

OpenAPIAndChainSubmitCheckProxyOrder::~OpenAPIAndChainSubmitCheckProxyOrder() {}

void OpenAPIAndChainSubmitCheckProxyOrder::validate() {
  // TODO: implement validation
}

web::json::value OpenAPIAndChainSubmitCheckProxyOrder::toJson() const {

  web::json::value val = web::json::value::object();

  if (m_CertHashIsSet) {
    val[utility::conversions::to_string_t(U("certHash"))] =
        ModelBase::toJson(m_CertHash);
  }

  return val;
}

bool OpenAPIAndChainSubmitCheckProxyOrder::fromJson(
    const web::json::value &val) {
  bool ok = true;

  if (val.has_field(utility::conversions::to_string_t(U("certHash")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("certHash")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setCertHash;
      ok &= ModelBase::fromJson(fieldValue, refVal_setCertHash);
      setCertHash(refVal_setCertHash);
    }
  }
  return ok;
}

void OpenAPIAndChainSubmitCheckProxyOrder::toMultipart(
    std::shared_ptr<MultipartFormData> multipart,
    const utility::string_t &prefix) const {
  utility::string_t namePrefix = prefix;
  if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                   utility::conversions::to_string_t(U("."))) {
    namePrefix += utility::conversions::to_string_t(U("."));
  }
  if (m_CertHashIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("certHash")),
        m_CertHash));
  }
}

bool OpenAPIAndChainSubmitCheckProxyOrder::fromMultiPart(
    std::shared_ptr<MultipartFormData> multipart,
    const utility::string_t &prefix) {
  bool ok = true;
  utility::string_t namePrefix = prefix;
  if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                   utility::conversions::to_string_t(U("."))) {
    namePrefix += utility::conversions::to_string_t(U("."));
  }

  if (multipart->hasContent(utility::conversions::to_string_t(U("certHash")))) {
    utility::string_t refVal_setCertHash;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("certHash"))),
        refVal_setCertHash);
    setCertHash(refVal_setCertHash);
  }
  return ok;
}

utility::string_t OpenAPIAndChainSubmitCheckProxyOrder::getCertHash() const {
  return m_CertHash;
}

void OpenAPIAndChainSubmitCheckProxyOrder::setCertHash(
    const utility::string_t &value) {
  m_CertHash = value;
  m_CertHashIsSet = true;
}

bool OpenAPIAndChainSubmitCheckProxyOrder::certHashIsSet() const {
  return m_CertHashIsSet;
}

void OpenAPIAndChainSubmitCheckProxyOrder::unsetCertHash() {
  m_CertHashIsSet = false;
}
} // namespace model
} // namespace client
} // namespace openapitools
} // namespace org
