/**
 * Open API
 * Open API
 *
 * The version of the OpenAPI document: 1.0
 * Contact: liuxiaobin@chainge.finance
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.5.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "CppRestOpenAPIClient/model/OpenAPIAndAppSubmitOrder.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

OpenAPIAndAppSubmitOrder::OpenAPIAndAppSubmitOrder() {
  m_ParamsIsSet = false;
  m_Signature = utility::conversions::to_string_t("");
  m_SignatureIsSet = false;
}

OpenAPIAndAppSubmitOrder::~OpenAPIAndAppSubmitOrder() {}

void OpenAPIAndAppSubmitOrder::validate() {
  // TODO: implement validation
}

web::json::value OpenAPIAndAppSubmitOrder::toJson() const {

  web::json::value val = web::json::value::object();

  if (m_ParamsIsSet) {
    val[utility::conversions::to_string_t(U("params"))] =
        ModelBase::toJson(m_Params);
  }
  if (m_SignatureIsSet) {
    val[utility::conversions::to_string_t(U("signature"))] =
        ModelBase::toJson(m_Signature);
  }

  return val;
}

bool OpenAPIAndAppSubmitOrder::fromJson(const web::json::value &val) {
  bool ok = true;

  if (val.has_field(utility::conversions::to_string_t(U("params")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("params")));
    if (!fieldValue.is_null()) {
      std::shared_ptr<OpenAPIAndAppSubmitAggregateOrder> refVal_setParams;
      ok &= ModelBase::fromJson(fieldValue, refVal_setParams);
      setParams(refVal_setParams);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("signature")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("signature")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setSignature;
      ok &= ModelBase::fromJson(fieldValue, refVal_setSignature);
      setSignature(refVal_setSignature);
    }
  }
  return ok;
}

void OpenAPIAndAppSubmitOrder::toMultipart(
    std::shared_ptr<MultipartFormData> multipart,
    const utility::string_t &prefix) const {
  utility::string_t namePrefix = prefix;
  if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                   utility::conversions::to_string_t(U("."))) {
    namePrefix += utility::conversions::to_string_t(U("."));
  }
  if (m_ParamsIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("params")), m_Params));
  }
  if (m_SignatureIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("signature")),
        m_Signature));
  }
}

bool OpenAPIAndAppSubmitOrder::fromMultiPart(
    std::shared_ptr<MultipartFormData> multipart,
    const utility::string_t &prefix) {
  bool ok = true;
  utility::string_t namePrefix = prefix;
  if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                   utility::conversions::to_string_t(U("."))) {
    namePrefix += utility::conversions::to_string_t(U("."));
  }

  if (multipart->hasContent(utility::conversions::to_string_t(U("params")))) {
    std::shared_ptr<OpenAPIAndAppSubmitAggregateOrder> refVal_setParams;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("params"))),
        refVal_setParams);
    setParams(refVal_setParams);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("signature")))) {
    utility::string_t refVal_setSignature;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("signature"))),
        refVal_setSignature);
    setSignature(refVal_setSignature);
  }
  return ok;
}

std::shared_ptr<OpenAPIAndAppSubmitAggregateOrder>
OpenAPIAndAppSubmitOrder::getParams() const {
  return m_Params;
}

void OpenAPIAndAppSubmitOrder::setParams(
    const std::shared_ptr<OpenAPIAndAppSubmitAggregateOrder> &value) {
  m_Params = value;
  m_ParamsIsSet = true;
}

bool OpenAPIAndAppSubmitOrder::paramsIsSet() const { return m_ParamsIsSet; }

void OpenAPIAndAppSubmitOrder::unsetParams() { m_ParamsIsSet = false; }
utility::string_t OpenAPIAndAppSubmitOrder::getSignature() const {
  return m_Signature;
}

void OpenAPIAndAppSubmitOrder::setSignature(const utility::string_t &value) {
  m_Signature = value;
  m_SignatureIsSet = true;
}

bool OpenAPIAndAppSubmitOrder::signatureIsSet() const {
  return m_SignatureIsSet;
}

void OpenAPIAndAppSubmitOrder::unsetSignature() { m_SignatureIsSet = false; }
} // namespace model
} // namespace client
} // namespace openapitools
} // namespace org
