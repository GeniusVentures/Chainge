/**
 * Open API
 * Open API
 *
 * The version of the OpenAPI document: 1.0
 * Contact: liuxiaobin@chainge.finance
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.5.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "CppRestOpenAPIClient/api/TheOrderRelatedAPIApi.h"
#include "CppRestOpenAPIClient/IHttpBody.h"
#include "CppRestOpenAPIClient/JsonBody.h"
#include "CppRestOpenAPIClient/MultipartFormData.h"

#include <boost/algorithm/string/replace.hpp>

#include <unordered_set>

namespace org {
namespace openapitools {
namespace client {
namespace api {

using namespace org::openapitools::client::model;

TheOrderRelatedAPIApi::TheOrderRelatedAPIApi(
    std::shared_ptr<const ApiClient> apiClient)
    : m_ApiClient(apiClient) {}

TheOrderRelatedAPIApi::~TheOrderRelatedAPIApi() {}

pplx::task<std::shared_ptr<BaseResponseMapstringobject>>
TheOrderRelatedAPIApi::checkProxyTaskUsingPOST(
    boost::optional<utility::string_t> appKey,
    boost::optional<utility::string_t> expireTime,
    boost::optional<utility::string_t> signature,
    boost::optional<utility::string_t> timestamp,
    boost::optional<std::shared_ptr<OpenAPIAndChainSubmitCheckProxyOrder>>
        check_Proxy_Task_params) const {

  std::shared_ptr<const ApiConfiguration> localVarApiConfiguration(
      m_ApiClient->getConfiguration());
  utility::string_t localVarPath =
      utility::conversions::to_string_t("/open/v1/order/checkProxyTask");

  std::map<utility::string_t, utility::string_t> localVarQueryParams;
  std::map<utility::string_t, utility::string_t> localVarHeaderParams(
      localVarApiConfiguration->getDefaultHeaders());
  std::map<utility::string_t, utility::string_t> localVarFormParams;
  std::map<utility::string_t, std::shared_ptr<HttpContent>> localVarFileParams;

  std::unordered_set<utility::string_t> localVarResponseHttpContentTypes;
  localVarResponseHttpContentTypes.insert(
      utility::conversions::to_string_t("*/*"));

  utility::string_t localVarResponseHttpContentType;

  // use JSON if possible
  if (localVarResponseHttpContentTypes.size() == 0) {
    localVarResponseHttpContentType =
        utility::conversions::to_string_t("application/json");
  }
  // JSON
  else if (localVarResponseHttpContentTypes.find(
               utility::conversions::to_string_t("application/json")) !=
           localVarResponseHttpContentTypes.end()) {
    localVarResponseHttpContentType =
        utility::conversions::to_string_t("application/json");
  }
  // multipart formdata
  else if (localVarResponseHttpContentTypes.find(
               utility::conversions::to_string_t("multipart/form-data")) !=
           localVarResponseHttpContentTypes.end()) {
    localVarResponseHttpContentType =
        utility::conversions::to_string_t("multipart/form-data");
  } else {
    throw ApiException(400,
                       utility::conversions::to_string_t(
                           "TheOrderRelatedAPIApi->checkProxyTaskUsingPOST "
                           "does not produce any supported media type"));
  }

  localVarHeaderParams[utility::conversions::to_string_t("Accept")] =
      localVarResponseHttpContentType;

  std::unordered_set<utility::string_t> localVarConsumeHttpContentTypes;
  localVarConsumeHttpContentTypes.insert(
      utility::conversions::to_string_t("application/json"));

  if (appKey) {
    localVarHeaderParams[utility::conversions::to_string_t("appKey")] =
        ApiClient::parameterToString(*appKey);
  }
  if (expireTime) {
    localVarHeaderParams[utility::conversions::to_string_t("expireTime")] =
        ApiClient::parameterToString(*expireTime);
  }
  if (signature) {
    localVarHeaderParams[utility::conversions::to_string_t("signature")] =
        ApiClient::parameterToString(*signature);
  }
  if (timestamp) {
    localVarHeaderParams[utility::conversions::to_string_t("timestamp")] =
        ApiClient::parameterToString(*timestamp);
  }

  std::shared_ptr<IHttpBody> localVarHttpBody;
  utility::string_t localVarRequestHttpContentType;

  // use JSON if possible
  if (localVarConsumeHttpContentTypes.size() == 0 ||
      localVarConsumeHttpContentTypes.find(utility::conversions::to_string_t(
          "application/json")) != localVarConsumeHttpContentTypes.end()) {
    localVarRequestHttpContentType =
        utility::conversions::to_string_t("application/json");
    web::json::value localVarJson;

    if (check_Proxy_Task_params)
      localVarJson = ModelBase::toJson(*check_Proxy_Task_params);

    localVarHttpBody = std::shared_ptr<IHttpBody>(new JsonBody(localVarJson));
  }
  // multipart formdata
  else if (localVarConsumeHttpContentTypes.find(
               utility::conversions::to_string_t("multipart/form-data")) !=
           localVarConsumeHttpContentTypes.end()) {
    localVarRequestHttpContentType =
        utility::conversions::to_string_t("multipart/form-data");
    std::shared_ptr<MultipartFormData> localVarMultipart(new MultipartFormData);

    if (check_Proxy_Task_params && (*check_Proxy_Task_params).get()) {
      (*check_Proxy_Task_params)
          ->toMultipart(localVarMultipart, utility::conversions::to_string_t(
                                               "check_Proxy_Task_params"));
    }

    localVarHttpBody = localVarMultipart;
    localVarRequestHttpContentType +=
        utility::conversions::to_string_t("; boundary=") +
        localVarMultipart->getBoundary();
  } else if (localVarConsumeHttpContentTypes.find(
                 utility::conversions::to_string_t(
                     "application/x-www-form-urlencoded")) !=
             localVarConsumeHttpContentTypes.end()) {
    localVarRequestHttpContentType =
        utility::conversions::to_string_t("application/x-www-form-urlencoded");
  } else {
    throw ApiException(415,
                       utility::conversions::to_string_t(
                           "TheOrderRelatedAPIApi->checkProxyTaskUsingPOST "
                           "does not consume any supported media type"));
  }

  return m_ApiClient
      ->callApi(localVarPath, utility::conversions::to_string_t("POST"),
                localVarQueryParams, localVarHttpBody, localVarHeaderParams,
                localVarFormParams, localVarFileParams,
                localVarRequestHttpContentType)
      .then([=](web::http::http_response localVarResponse) {
        if (m_ApiClient->getResponseHandler()) {
          m_ApiClient->getResponseHandler()(localVarResponse.status_code(),
                                            localVarResponse.headers());
        }

        // 1xx - informational : OK
        // 2xx - successful       : OK
        // 3xx - redirection   : OK
        // 4xx - client error  : not OK
        // 5xx - client error  : not OK
        if (localVarResponse.status_code() >= 400) {
          throw ApiException(
              localVarResponse.status_code(),
              utility::conversions::to_string_t(
                  "error calling checkProxyTaskUsingPOST: ") +
                  localVarResponse.reason_phrase(),
              std::make_shared<std::stringstream>(
                  localVarResponse.extract_utf8string(true).get()));
        }

        // check response content type
        if (localVarResponse.headers().has(
                utility::conversions::to_string_t("Content-Type"))) {
          utility::string_t localVarContentType =
              localVarResponse
                  .headers()[utility::conversions::to_string_t("Content-Type")];
          if (localVarContentType.find(localVarResponseHttpContentType) ==
              std::string::npos) {
            throw ApiException(
                500,
                utility::conversions::to_string_t(
                    "error calling checkProxyTaskUsingPOST: unexpected "
                    "response type: ") +
                    localVarContentType,
                std::make_shared<std::stringstream>(
                    localVarResponse.extract_utf8string(true).get()));
          }
        }

        return localVarResponse.extract_string();
      })
      .then([=](utility::string_t localVarResponse) {
        std::shared_ptr<BaseResponseMapstringobject> localVarResult(
            new BaseResponseMapstringobject());

        if (localVarResponseHttpContentType ==
            utility::conversions::to_string_t("application/json")) {
          web::json::value localVarJson =
              web::json::value::parse(localVarResponse);

          ModelBase::fromJson(localVarJson, localVarResult);
        }
        // else if(localVarResponseHttpContentType ==
        // utility::conversions::to_string_t("multipart/form-data"))
        // {
        // TODO multipart response parsing
        // }
        else {
          throw ApiException(500, utility::conversions::to_string_t(
                                      "error calling checkProxyTaskUsingPOST: "
                                      "unsupported response type"));
        }

        return localVarResult;
      });
}
pplx::task<std::shared_ptr<BaseResponseMapstringobject>>
TheOrderRelatedAPIApi::getAggregateQuoteUsingPOST(
    boost::optional<utility::string_t> appKey,
    boost::optional<utility::string_t> expireTime,
    boost::optional<utility::string_t> signature,
    boost::optional<utility::string_t> timestamp,
    boost::optional<std::shared_ptr<OpenAPIInquiryParameters>>
        get_aggregate_quote) const {

  std::shared_ptr<const ApiConfiguration> localVarApiConfiguration(
      m_ApiClient->getConfiguration());
  utility::string_t localVarPath =
      utility::conversions::to_string_t("/open/v1/order/getAggregateQuote");

  std::map<utility::string_t, utility::string_t> localVarQueryParams;
  std::map<utility::string_t, utility::string_t> localVarHeaderParams(
      localVarApiConfiguration->getDefaultHeaders());
  std::map<utility::string_t, utility::string_t> localVarFormParams;
  std::map<utility::string_t, std::shared_ptr<HttpContent>> localVarFileParams;

  std::unordered_set<utility::string_t> localVarResponseHttpContentTypes;
  localVarResponseHttpContentTypes.insert(
      utility::conversions::to_string_t("*/*"));

  utility::string_t localVarResponseHttpContentType;

  // use JSON if possible
  if (localVarResponseHttpContentTypes.size() == 0) {
    localVarResponseHttpContentType =
        utility::conversions::to_string_t("application/json");
  }
  // JSON
  else if (localVarResponseHttpContentTypes.find(
               utility::conversions::to_string_t("application/json")) !=
           localVarResponseHttpContentTypes.end()) {
    localVarResponseHttpContentType =
        utility::conversions::to_string_t("application/json");
  }
  // multipart formdata
  else if (localVarResponseHttpContentTypes.find(
               utility::conversions::to_string_t("multipart/form-data")) !=
           localVarResponseHttpContentTypes.end()) {
    localVarResponseHttpContentType =
        utility::conversions::to_string_t("multipart/form-data");
  } else {
    throw ApiException(400,
                       utility::conversions::to_string_t(
                           "TheOrderRelatedAPIApi->getAggregateQuoteUsingPOST "
                           "does not produce any supported media type"));
  }

  localVarHeaderParams[utility::conversions::to_string_t("Accept")] =
      localVarResponseHttpContentType;

  std::unordered_set<utility::string_t> localVarConsumeHttpContentTypes;
  localVarConsumeHttpContentTypes.insert(
      utility::conversions::to_string_t("application/json"));

  if (appKey) {
    localVarHeaderParams[utility::conversions::to_string_t("appKey")] =
        ApiClient::parameterToString(*appKey);
  }
  if (expireTime) {
    localVarHeaderParams[utility::conversions::to_string_t("expireTime")] =
        ApiClient::parameterToString(*expireTime);
  }
  if (signature) {
    localVarHeaderParams[utility::conversions::to_string_t("signature")] =
        ApiClient::parameterToString(*signature);
  }
  if (timestamp) {
    localVarHeaderParams[utility::conversions::to_string_t("timestamp")] =
        ApiClient::parameterToString(*timestamp);
  }

  std::shared_ptr<IHttpBody> localVarHttpBody;
  utility::string_t localVarRequestHttpContentType;

  // use JSON if possible
  if (localVarConsumeHttpContentTypes.size() == 0 ||
      localVarConsumeHttpContentTypes.find(utility::conversions::to_string_t(
          "application/json")) != localVarConsumeHttpContentTypes.end()) {
    localVarRequestHttpContentType =
        utility::conversions::to_string_t("application/json");
    web::json::value localVarJson;

    if (get_aggregate_quote)
      localVarJson = ModelBase::toJson(*get_aggregate_quote);

    localVarHttpBody = std::shared_ptr<IHttpBody>(new JsonBody(localVarJson));
  }
  // multipart formdata
  else if (localVarConsumeHttpContentTypes.find(
               utility::conversions::to_string_t("multipart/form-data")) !=
           localVarConsumeHttpContentTypes.end()) {
    localVarRequestHttpContentType =
        utility::conversions::to_string_t("multipart/form-data");
    std::shared_ptr<MultipartFormData> localVarMultipart(new MultipartFormData);

    if (get_aggregate_quote && (*get_aggregate_quote).get()) {
      (*get_aggregate_quote)
          ->toMultipart(localVarMultipart, utility::conversions::to_string_t(
                                               "get_aggregate_quote"));
    }

    localVarHttpBody = localVarMultipart;
    localVarRequestHttpContentType +=
        utility::conversions::to_string_t("; boundary=") +
        localVarMultipart->getBoundary();
  } else if (localVarConsumeHttpContentTypes.find(
                 utility::conversions::to_string_t(
                     "application/x-www-form-urlencoded")) !=
             localVarConsumeHttpContentTypes.end()) {
    localVarRequestHttpContentType =
        utility::conversions::to_string_t("application/x-www-form-urlencoded");
  } else {
    throw ApiException(415,
                       utility::conversions::to_string_t(
                           "TheOrderRelatedAPIApi->getAggregateQuoteUsingPOST "
                           "does not consume any supported media type"));
  }

  return m_ApiClient
      ->callApi(localVarPath, utility::conversions::to_string_t("POST"),
                localVarQueryParams, localVarHttpBody, localVarHeaderParams,
                localVarFormParams, localVarFileParams,
                localVarRequestHttpContentType)
      .then([=](web::http::http_response localVarResponse) {
        if (m_ApiClient->getResponseHandler()) {
          m_ApiClient->getResponseHandler()(localVarResponse.status_code(),
                                            localVarResponse.headers());
        }

        // 1xx - informational : OK
        // 2xx - successful       : OK
        // 3xx - redirection   : OK
        // 4xx - client error  : not OK
        // 5xx - client error  : not OK
        if (localVarResponse.status_code() >= 400) {
          throw ApiException(
              localVarResponse.status_code(),
              utility::conversions::to_string_t(
                  "error calling getAggregateQuoteUsingPOST: ") +
                  localVarResponse.reason_phrase(),
              std::make_shared<std::stringstream>(
                  localVarResponse.extract_utf8string(true).get()));
        }

        // check response content type
        if (localVarResponse.headers().has(
                utility::conversions::to_string_t("Content-Type"))) {
          utility::string_t localVarContentType =
              localVarResponse
                  .headers()[utility::conversions::to_string_t("Content-Type")];
          if (localVarContentType.find(localVarResponseHttpContentType) ==
              std::string::npos) {
            throw ApiException(
                500,
                utility::conversions::to_string_t(
                    "error calling getAggregateQuoteUsingPOST: unexpected "
                    "response type: ") +
                    localVarContentType,
                std::make_shared<std::stringstream>(
                    localVarResponse.extract_utf8string(true).get()));
          }
        }

        return localVarResponse.extract_string();
      })
      .then([=](utility::string_t localVarResponse) {
        std::shared_ptr<BaseResponseMapstringobject> localVarResult(
            new BaseResponseMapstringobject());

        if (localVarResponseHttpContentType ==
            utility::conversions::to_string_t("application/json")) {
          web::json::value localVarJson =
              web::json::value::parse(localVarResponse);

          ModelBase::fromJson(localVarJson, localVarResult);
        }
        // else if(localVarResponseHttpContentType ==
        // utility::conversions::to_string_t("multipart/form-data"))
        // {
        // TODO multipart response parsing
        // }
        else {
          throw ApiException(500,
                             utility::conversions::to_string_t(
                                 "error calling getAggregateQuoteUsingPOST: "
                                 "unsupported response type"));
        }

        return localVarResult;
      });
}
pplx::task<std::shared_ptr<BaseResponseMapstringobject>>
TheOrderRelatedAPIApi::getCrossChainQuoteUsingPOST(
    boost::optional<utility::string_t> appKey,
    boost::optional<utility::string_t> expireTime,
    boost::optional<utility::string_t> signature,
    boost::optional<utility::string_t> timestamp,
    boost::optional<std::shared_ptr<OpenAPICrossChainInquiryParameters>>
        get_cross_chain_quote) const {

  std::shared_ptr<const ApiConfiguration> localVarApiConfiguration(
      m_ApiClient->getConfiguration());
  utility::string_t localVarPath =
      utility::conversions::to_string_t("/open/v1/order/getCrossChainQuote");

  std::map<utility::string_t, utility::string_t> localVarQueryParams;
  std::map<utility::string_t, utility::string_t> localVarHeaderParams(
      localVarApiConfiguration->getDefaultHeaders());
  std::map<utility::string_t, utility::string_t> localVarFormParams;
  std::map<utility::string_t, std::shared_ptr<HttpContent>> localVarFileParams;

  std::unordered_set<utility::string_t> localVarResponseHttpContentTypes;
  localVarResponseHttpContentTypes.insert(
      utility::conversions::to_string_t("*/*"));

  utility::string_t localVarResponseHttpContentType;

  // use JSON if possible
  if (localVarResponseHttpContentTypes.size() == 0) {
    localVarResponseHttpContentType =
        utility::conversions::to_string_t("application/json");
  }
  // JSON
  else if (localVarResponseHttpContentTypes.find(
               utility::conversions::to_string_t("application/json")) !=
           localVarResponseHttpContentTypes.end()) {
    localVarResponseHttpContentType =
        utility::conversions::to_string_t("application/json");
  }
  // multipart formdata
  else if (localVarResponseHttpContentTypes.find(
               utility::conversions::to_string_t("multipart/form-data")) !=
           localVarResponseHttpContentTypes.end()) {
    localVarResponseHttpContentType =
        utility::conversions::to_string_t("multipart/form-data");
  } else {
    throw ApiException(400,
                       utility::conversions::to_string_t(
                           "TheOrderRelatedAPIApi->getCrossChainQuoteUsingPOST "
                           "does not produce any supported media type"));
  }

  localVarHeaderParams[utility::conversions::to_string_t("Accept")] =
      localVarResponseHttpContentType;

  std::unordered_set<utility::string_t> localVarConsumeHttpContentTypes;
  localVarConsumeHttpContentTypes.insert(
      utility::conversions::to_string_t("application/json"));

  if (appKey) {
    localVarHeaderParams[utility::conversions::to_string_t("appKey")] =
        ApiClient::parameterToString(*appKey);
  }
  if (expireTime) {
    localVarHeaderParams[utility::conversions::to_string_t("expireTime")] =
        ApiClient::parameterToString(*expireTime);
  }
  if (signature) {
    localVarHeaderParams[utility::conversions::to_string_t("signature")] =
        ApiClient::parameterToString(*signature);
  }
  if (timestamp) {
    localVarHeaderParams[utility::conversions::to_string_t("timestamp")] =
        ApiClient::parameterToString(*timestamp);
  }

  std::shared_ptr<IHttpBody> localVarHttpBody;
  utility::string_t localVarRequestHttpContentType;

  // use JSON if possible
  if (localVarConsumeHttpContentTypes.size() == 0 ||
      localVarConsumeHttpContentTypes.find(utility::conversions::to_string_t(
          "application/json")) != localVarConsumeHttpContentTypes.end()) {
    localVarRequestHttpContentType =
        utility::conversions::to_string_t("application/json");
    web::json::value localVarJson;

    if (get_cross_chain_quote)
      localVarJson = ModelBase::toJson(*get_cross_chain_quote);

    localVarHttpBody = std::shared_ptr<IHttpBody>(new JsonBody(localVarJson));
  }
  // multipart formdata
  else if (localVarConsumeHttpContentTypes.find(
               utility::conversions::to_string_t("multipart/form-data")) !=
           localVarConsumeHttpContentTypes.end()) {
    localVarRequestHttpContentType =
        utility::conversions::to_string_t("multipart/form-data");
    std::shared_ptr<MultipartFormData> localVarMultipart(new MultipartFormData);

    if (get_cross_chain_quote && (*get_cross_chain_quote).get()) {
      (*get_cross_chain_quote)
          ->toMultipart(localVarMultipart, utility::conversions::to_string_t(
                                               "get_cross_chain_quote"));
    }

    localVarHttpBody = localVarMultipart;
    localVarRequestHttpContentType +=
        utility::conversions::to_string_t("; boundary=") +
        localVarMultipart->getBoundary();
  } else if (localVarConsumeHttpContentTypes.find(
                 utility::conversions::to_string_t(
                     "application/x-www-form-urlencoded")) !=
             localVarConsumeHttpContentTypes.end()) {
    localVarRequestHttpContentType =
        utility::conversions::to_string_t("application/x-www-form-urlencoded");
  } else {
    throw ApiException(415,
                       utility::conversions::to_string_t(
                           "TheOrderRelatedAPIApi->getCrossChainQuoteUsingPOST "
                           "does not consume any supported media type"));
  }

  return m_ApiClient
      ->callApi(localVarPath, utility::conversions::to_string_t("POST"),
                localVarQueryParams, localVarHttpBody, localVarHeaderParams,
                localVarFormParams, localVarFileParams,
                localVarRequestHttpContentType)
      .then([=](web::http::http_response localVarResponse) {
        if (m_ApiClient->getResponseHandler()) {
          m_ApiClient->getResponseHandler()(localVarResponse.status_code(),
                                            localVarResponse.headers());
        }

        // 1xx - informational : OK
        // 2xx - successful       : OK
        // 3xx - redirection   : OK
        // 4xx - client error  : not OK
        // 5xx - client error  : not OK
        if (localVarResponse.status_code() >= 400) {
          throw ApiException(
              localVarResponse.status_code(),
              utility::conversions::to_string_t(
                  "error calling getCrossChainQuoteUsingPOST: ") +
                  localVarResponse.reason_phrase(),
              std::make_shared<std::stringstream>(
                  localVarResponse.extract_utf8string(true).get()));
        }

        // check response content type
        if (localVarResponse.headers().has(
                utility::conversions::to_string_t("Content-Type"))) {
          utility::string_t localVarContentType =
              localVarResponse
                  .headers()[utility::conversions::to_string_t("Content-Type")];
          if (localVarContentType.find(localVarResponseHttpContentType) ==
              std::string::npos) {
            throw ApiException(
                500,
                utility::conversions::to_string_t(
                    "error calling getCrossChainQuoteUsingPOST: unexpected "
                    "response type: ") +
                    localVarContentType,
                std::make_shared<std::stringstream>(
                    localVarResponse.extract_utf8string(true).get()));
          }
        }

        return localVarResponse.extract_string();
      })
      .then([=](utility::string_t localVarResponse) {
        std::shared_ptr<BaseResponseMapstringobject> localVarResult(
            new BaseResponseMapstringobject());

        if (localVarResponseHttpContentType ==
            utility::conversions::to_string_t("application/json")) {
          web::json::value localVarJson =
              web::json::value::parse(localVarResponse);

          ModelBase::fromJson(localVarJson, localVarResult);
        }
        // else if(localVarResponseHttpContentType ==
        // utility::conversions::to_string_t("multipart/form-data"))
        // {
        // TODO multipart response parsing
        // }
        else {
          throw ApiException(500,
                             utility::conversions::to_string_t(
                                 "error calling getCrossChainQuoteUsingPOST: "
                                 "unsupported response type"));
        }

        return localVarResult;
      });
}
pplx::task<std::shared_ptr<BaseResponseMapstringobject>>
TheOrderRelatedAPIApi::getOrderDetailByHashAndEvmAddressUsingGET(
    utility::string_t chain, utility::string_t evmAddress,
    utility::string_t hash, boost::optional<utility::string_t> appKey,
    boost::optional<utility::string_t> expireTime,
    boost::optional<utility::string_t> signature,
    boost::optional<utility::string_t> timestamp) const {

  std::shared_ptr<const ApiConfiguration> localVarApiConfiguration(
      m_ApiClient->getConfiguration());
  utility::string_t localVarPath = utility::conversions::to_string_t(
      "/open/v1/order/getOrderDetailByHashAndEvmAddress");

  std::map<utility::string_t, utility::string_t> localVarQueryParams;
  std::map<utility::string_t, utility::string_t> localVarHeaderParams(
      localVarApiConfiguration->getDefaultHeaders());
  std::map<utility::string_t, utility::string_t> localVarFormParams;
  std::map<utility::string_t, std::shared_ptr<HttpContent>> localVarFileParams;

  std::unordered_set<utility::string_t> localVarResponseHttpContentTypes;
  localVarResponseHttpContentTypes.insert(
      utility::conversions::to_string_t("*/*"));

  utility::string_t localVarResponseHttpContentType;

  // use JSON if possible
  if (localVarResponseHttpContentTypes.size() == 0) {
    localVarResponseHttpContentType =
        utility::conversions::to_string_t("application/json");
  }
  // JSON
  else if (localVarResponseHttpContentTypes.find(
               utility::conversions::to_string_t("application/json")) !=
           localVarResponseHttpContentTypes.end()) {
    localVarResponseHttpContentType =
        utility::conversions::to_string_t("application/json");
  }
  // multipart formdata
  else if (localVarResponseHttpContentTypes.find(
               utility::conversions::to_string_t("multipart/form-data")) !=
           localVarResponseHttpContentTypes.end()) {
    localVarResponseHttpContentType =
        utility::conversions::to_string_t("multipart/form-data");
  } else {
    throw ApiException(
        400,
        utility::conversions::to_string_t(
            "TheOrderRelatedAPIApi->getOrderDetailByHashAndEvmAddressUsingGET "
            "does not produce any supported media type"));
  }

  localVarHeaderParams[utility::conversions::to_string_t("Accept")] =
      localVarResponseHttpContentType;

  std::unordered_set<utility::string_t> localVarConsumeHttpContentTypes;

  {
    localVarQueryParams[utility::conversions::to_string_t("chain")] =
        ApiClient::parameterToString(chain);
  }
  {
    localVarQueryParams[utility::conversions::to_string_t("evmAddress")] =
        ApiClient::parameterToString(evmAddress);
  }
  {
    localVarQueryParams[utility::conversions::to_string_t("hash")] =
        ApiClient::parameterToString(hash);
  }
  if (appKey) {
    localVarHeaderParams[utility::conversions::to_string_t("appKey")] =
        ApiClient::parameterToString(*appKey);
  }
  if (expireTime) {
    localVarHeaderParams[utility::conversions::to_string_t("expireTime")] =
        ApiClient::parameterToString(*expireTime);
  }
  if (signature) {
    localVarHeaderParams[utility::conversions::to_string_t("signature")] =
        ApiClient::parameterToString(*signature);
  }
  if (timestamp) {
    localVarHeaderParams[utility::conversions::to_string_t("timestamp")] =
        ApiClient::parameterToString(*timestamp);
  }

  std::shared_ptr<IHttpBody> localVarHttpBody;
  utility::string_t localVarRequestHttpContentType;

  // use JSON if possible
  if (localVarConsumeHttpContentTypes.size() == 0 ||
      localVarConsumeHttpContentTypes.find(utility::conversions::to_string_t(
          "application/json")) != localVarConsumeHttpContentTypes.end()) {
    localVarRequestHttpContentType =
        utility::conversions::to_string_t("application/json");
  }
  // multipart formdata
  else if (localVarConsumeHttpContentTypes.find(
               utility::conversions::to_string_t("multipart/form-data")) !=
           localVarConsumeHttpContentTypes.end()) {
    localVarRequestHttpContentType =
        utility::conversions::to_string_t("multipart/form-data");
  } else if (localVarConsumeHttpContentTypes.find(
                 utility::conversions::to_string_t(
                     "application/x-www-form-urlencoded")) !=
             localVarConsumeHttpContentTypes.end()) {
    localVarRequestHttpContentType =
        utility::conversions::to_string_t("application/x-www-form-urlencoded");
  } else {
    throw ApiException(
        415,
        utility::conversions::to_string_t(
            "TheOrderRelatedAPIApi->getOrderDetailByHashAndEvmAddressUsingGET "
            "does not consume any supported media type"));
  }

  return m_ApiClient
      ->callApi(localVarPath, utility::conversions::to_string_t("GET"),
                localVarQueryParams, localVarHttpBody, localVarHeaderParams,
                localVarFormParams, localVarFileParams,
                localVarRequestHttpContentType)
      .then([=](web::http::http_response localVarResponse) {
        if (m_ApiClient->getResponseHandler()) {
          m_ApiClient->getResponseHandler()(localVarResponse.status_code(),
                                            localVarResponse.headers());
        }

        // 1xx - informational : OK
        // 2xx - successful       : OK
        // 3xx - redirection   : OK
        // 4xx - client error  : not OK
        // 5xx - client error  : not OK
        if (localVarResponse.status_code() >= 400) {
          throw ApiException(
              localVarResponse.status_code(),
              utility::conversions::to_string_t(
                  "error calling getOrderDetailByHashAndEvmAddressUsingGET: ") +
                  localVarResponse.reason_phrase(),
              std::make_shared<std::stringstream>(
                  localVarResponse.extract_utf8string(true).get()));
        }

        // check response content type
        if (localVarResponse.headers().has(
                utility::conversions::to_string_t("Content-Type"))) {
          utility::string_t localVarContentType =
              localVarResponse
                  .headers()[utility::conversions::to_string_t("Content-Type")];
          if (localVarContentType.find(localVarResponseHttpContentType) ==
              std::string::npos) {
            throw ApiException(
                500,
                utility::conversions::to_string_t(
                    "error calling getOrderDetailByHashAndEvmAddressUsingGET: "
                    "unexpected response type: ") +
                    localVarContentType,
                std::make_shared<std::stringstream>(
                    localVarResponse.extract_utf8string(true).get()));
          }
        }

        return localVarResponse.extract_string();
      })
      .then([=](utility::string_t localVarResponse) {
        std::shared_ptr<BaseResponseMapstringobject> localVarResult(
            new BaseResponseMapstringobject());

        if (localVarResponseHttpContentType ==
            utility::conversions::to_string_t("application/json")) {
          web::json::value localVarJson =
              web::json::value::parse(localVarResponse);

          ModelBase::fromJson(localVarJson, localVarResult);
        }
        // else if(localVarResponseHttpContentType ==
        // utility::conversions::to_string_t("multipart/form-data"))
        // {
        // TODO multipart response parsing
        // }
        else {
          throw ApiException(
              500,
              utility::conversions::to_string_t(
                  "error calling getOrderDetailByHashAndEvmAddressUsingGET: "
                  "unsupported response type"));
        }

        return localVarResult;
      });
}
pplx::task<std::shared_ptr<BaseResponseMapstringobject>>
TheOrderRelatedAPIApi::getOrderDetailUsingGET(
    utility::string_t sn, boost::optional<utility::string_t> appKey,
    boost::optional<utility::string_t> expireTime,
    boost::optional<utility::string_t> signature,
    boost::optional<utility::string_t> timestamp) const {

  std::shared_ptr<const ApiConfiguration> localVarApiConfiguration(
      m_ApiClient->getConfiguration());
  utility::string_t localVarPath =
      utility::conversions::to_string_t("/open/v1/order/getOrderDetail");

  std::map<utility::string_t, utility::string_t> localVarQueryParams;
  std::map<utility::string_t, utility::string_t> localVarHeaderParams(
      localVarApiConfiguration->getDefaultHeaders());
  std::map<utility::string_t, utility::string_t> localVarFormParams;
  std::map<utility::string_t, std::shared_ptr<HttpContent>> localVarFileParams;

  std::unordered_set<utility::string_t> localVarResponseHttpContentTypes;
  localVarResponseHttpContentTypes.insert(
      utility::conversions::to_string_t("*/*"));

  utility::string_t localVarResponseHttpContentType;

  // use JSON if possible
  if (localVarResponseHttpContentTypes.size() == 0) {
    localVarResponseHttpContentType =
        utility::conversions::to_string_t("application/json");
  }
  // JSON
  else if (localVarResponseHttpContentTypes.find(
               utility::conversions::to_string_t("application/json")) !=
           localVarResponseHttpContentTypes.end()) {
    localVarResponseHttpContentType =
        utility::conversions::to_string_t("application/json");
  }
  // multipart formdata
  else if (localVarResponseHttpContentTypes.find(
               utility::conversions::to_string_t("multipart/form-data")) !=
           localVarResponseHttpContentTypes.end()) {
    localVarResponseHttpContentType =
        utility::conversions::to_string_t("multipart/form-data");
  } else {
    throw ApiException(400, utility::conversions::to_string_t(
                                "TheOrderRelatedAPIApi->getOrderDetailUsingGET "
                                "does not produce any supported media type"));
  }

  localVarHeaderParams[utility::conversions::to_string_t("Accept")] =
      localVarResponseHttpContentType;

  std::unordered_set<utility::string_t> localVarConsumeHttpContentTypes;

  {
    localVarQueryParams[utility::conversions::to_string_t("sn")] =
        ApiClient::parameterToString(sn);
  }
  if (appKey) {
    localVarHeaderParams[utility::conversions::to_string_t("appKey")] =
        ApiClient::parameterToString(*appKey);
  }
  if (expireTime) {
    localVarHeaderParams[utility::conversions::to_string_t("expireTime")] =
        ApiClient::parameterToString(*expireTime);
  }
  if (signature) {
    localVarHeaderParams[utility::conversions::to_string_t("signature")] =
        ApiClient::parameterToString(*signature);
  }
  if (timestamp) {
    localVarHeaderParams[utility::conversions::to_string_t("timestamp")] =
        ApiClient::parameterToString(*timestamp);
  }

  std::shared_ptr<IHttpBody> localVarHttpBody;
  utility::string_t localVarRequestHttpContentType;

  // use JSON if possible
  if (localVarConsumeHttpContentTypes.size() == 0 ||
      localVarConsumeHttpContentTypes.find(utility::conversions::to_string_t(
          "application/json")) != localVarConsumeHttpContentTypes.end()) {
    localVarRequestHttpContentType =
        utility::conversions::to_string_t("application/json");
  }
  // multipart formdata
  else if (localVarConsumeHttpContentTypes.find(
               utility::conversions::to_string_t("multipart/form-data")) !=
           localVarConsumeHttpContentTypes.end()) {
    localVarRequestHttpContentType =
        utility::conversions::to_string_t("multipart/form-data");
  } else if (localVarConsumeHttpContentTypes.find(
                 utility::conversions::to_string_t(
                     "application/x-www-form-urlencoded")) !=
             localVarConsumeHttpContentTypes.end()) {
    localVarRequestHttpContentType =
        utility::conversions::to_string_t("application/x-www-form-urlencoded");
  } else {
    throw ApiException(415, utility::conversions::to_string_t(
                                "TheOrderRelatedAPIApi->getOrderDetailUsingGET "
                                "does not consume any supported media type"));
  }

  return m_ApiClient
      ->callApi(localVarPath, utility::conversions::to_string_t("GET"),
                localVarQueryParams, localVarHttpBody, localVarHeaderParams,
                localVarFormParams, localVarFileParams,
                localVarRequestHttpContentType)
      .then([=](web::http::http_response localVarResponse) {
        if (m_ApiClient->getResponseHandler()) {
          m_ApiClient->getResponseHandler()(localVarResponse.status_code(),
                                            localVarResponse.headers());
        }

        // 1xx - informational : OK
        // 2xx - successful       : OK
        // 3xx - redirection   : OK
        // 4xx - client error  : not OK
        // 5xx - client error  : not OK
        if (localVarResponse.status_code() >= 400) {
          throw ApiException(
              localVarResponse.status_code(),
              utility::conversions::to_string_t(
                  "error calling getOrderDetailUsingGET: ") +
                  localVarResponse.reason_phrase(),
              std::make_shared<std::stringstream>(
                  localVarResponse.extract_utf8string(true).get()));
        }

        // check response content type
        if (localVarResponse.headers().has(
                utility::conversions::to_string_t("Content-Type"))) {
          utility::string_t localVarContentType =
              localVarResponse
                  .headers()[utility::conversions::to_string_t("Content-Type")];
          if (localVarContentType.find(localVarResponseHttpContentType) ==
              std::string::npos) {
            throw ApiException(
                500,
                utility::conversions::to_string_t(
                    "error calling getOrderDetailUsingGET: unexpected response "
                    "type: ") +
                    localVarContentType,
                std::make_shared<std::stringstream>(
                    localVarResponse.extract_utf8string(true).get()));
          }
        }

        return localVarResponse.extract_string();
      })
      .then([=](utility::string_t localVarResponse) {
        std::shared_ptr<BaseResponseMapstringobject> localVarResult(
            new BaseResponseMapstringobject());

        if (localVarResponseHttpContentType ==
            utility::conversions::to_string_t("application/json")) {
          web::json::value localVarJson =
              web::json::value::parse(localVarResponse);

          ModelBase::fromJson(localVarJson, localVarResult);
        }
        // else if(localVarResponseHttpContentType ==
        // utility::conversions::to_string_t("multipart/form-data"))
        // {
        // TODO multipart response parsing
        // }
        else {
          throw ApiException(500, utility::conversions::to_string_t(
                                      "error calling getOrderDetailUsingGET: "
                                      "unsupported response type"));
        }

        return localVarResult;
      });
}
pplx::task<std::shared_ptr<BaseResponseMapstringobject>>
TheOrderRelatedAPIApi::getOrderListByAddressUsingGET(
    utility::string_t evmAddress, boost::optional<utility::string_t> appKey,
    boost::optional<utility::string_t> expireTime,
    boost::optional<int32_t> pageNum, boost::optional<int32_t> pageSize,
    boost::optional<utility::string_t> signature,
    boost::optional<utility::string_t> timestamp) const {

  std::shared_ptr<const ApiConfiguration> localVarApiConfiguration(
      m_ApiClient->getConfiguration());
  utility::string_t localVarPath =
      utility::conversions::to_string_t("/open/v1/order/getOrderListByAddress");

  std::map<utility::string_t, utility::string_t> localVarQueryParams;
  std::map<utility::string_t, utility::string_t> localVarHeaderParams(
      localVarApiConfiguration->getDefaultHeaders());
  std::map<utility::string_t, utility::string_t> localVarFormParams;
  std::map<utility::string_t, std::shared_ptr<HttpContent>> localVarFileParams;

  std::unordered_set<utility::string_t> localVarResponseHttpContentTypes;
  localVarResponseHttpContentTypes.insert(
      utility::conversions::to_string_t("*/*"));

  utility::string_t localVarResponseHttpContentType;

  // use JSON if possible
  if (localVarResponseHttpContentTypes.size() == 0) {
    localVarResponseHttpContentType =
        utility::conversions::to_string_t("application/json");
  }
  // JSON
  else if (localVarResponseHttpContentTypes.find(
               utility::conversions::to_string_t("application/json")) !=
           localVarResponseHttpContentTypes.end()) {
    localVarResponseHttpContentType =
        utility::conversions::to_string_t("application/json");
  }
  // multipart formdata
  else if (localVarResponseHttpContentTypes.find(
               utility::conversions::to_string_t("multipart/form-data")) !=
           localVarResponseHttpContentTypes.end()) {
    localVarResponseHttpContentType =
        utility::conversions::to_string_t("multipart/form-data");
  } else {
    throw ApiException(
        400, utility::conversions::to_string_t(
                 "TheOrderRelatedAPIApi->getOrderListByAddressUsingGET does "
                 "not produce any supported media type"));
  }

  localVarHeaderParams[utility::conversions::to_string_t("Accept")] =
      localVarResponseHttpContentType;

  std::unordered_set<utility::string_t> localVarConsumeHttpContentTypes;

  {
    localVarQueryParams[utility::conversions::to_string_t("evmAddress")] =
        ApiClient::parameterToString(evmAddress);
  }
  if (appKey) {
    localVarHeaderParams[utility::conversions::to_string_t("appKey")] =
        ApiClient::parameterToString(*appKey);
  }
  if (expireTime) {
    localVarHeaderParams[utility::conversions::to_string_t("expireTime")] =
        ApiClient::parameterToString(*expireTime);
  }
  if (pageNum) {
    localVarQueryParams[utility::conversions::to_string_t("pageNum")] =
        ApiClient::parameterToString(*pageNum);
  }
  if (pageSize) {
    localVarQueryParams[utility::conversions::to_string_t("pageSize")] =
        ApiClient::parameterToString(*pageSize);
  }
  if (signature) {
    localVarHeaderParams[utility::conversions::to_string_t("signature")] =
        ApiClient::parameterToString(*signature);
  }
  if (timestamp) {
    localVarHeaderParams[utility::conversions::to_string_t("timestamp")] =
        ApiClient::parameterToString(*timestamp);
  }

  std::shared_ptr<IHttpBody> localVarHttpBody;
  utility::string_t localVarRequestHttpContentType;

  // use JSON if possible
  if (localVarConsumeHttpContentTypes.size() == 0 ||
      localVarConsumeHttpContentTypes.find(utility::conversions::to_string_t(
          "application/json")) != localVarConsumeHttpContentTypes.end()) {
    localVarRequestHttpContentType =
        utility::conversions::to_string_t("application/json");
  }
  // multipart formdata
  else if (localVarConsumeHttpContentTypes.find(
               utility::conversions::to_string_t("multipart/form-data")) !=
           localVarConsumeHttpContentTypes.end()) {
    localVarRequestHttpContentType =
        utility::conversions::to_string_t("multipart/form-data");
  } else if (localVarConsumeHttpContentTypes.find(
                 utility::conversions::to_string_t(
                     "application/x-www-form-urlencoded")) !=
             localVarConsumeHttpContentTypes.end()) {
    localVarRequestHttpContentType =
        utility::conversions::to_string_t("application/x-www-form-urlencoded");
  } else {
    throw ApiException(
        415, utility::conversions::to_string_t(
                 "TheOrderRelatedAPIApi->getOrderListByAddressUsingGET does "
                 "not consume any supported media type"));
  }

  return m_ApiClient
      ->callApi(localVarPath, utility::conversions::to_string_t("GET"),
                localVarQueryParams, localVarHttpBody, localVarHeaderParams,
                localVarFormParams, localVarFileParams,
                localVarRequestHttpContentType)
      .then([=](web::http::http_response localVarResponse) {
        if (m_ApiClient->getResponseHandler()) {
          m_ApiClient->getResponseHandler()(localVarResponse.status_code(),
                                            localVarResponse.headers());
        }

        // 1xx - informational : OK
        // 2xx - successful       : OK
        // 3xx - redirection   : OK
        // 4xx - client error  : not OK
        // 5xx - client error  : not OK
        if (localVarResponse.status_code() >= 400) {
          throw ApiException(
              localVarResponse.status_code(),
              utility::conversions::to_string_t(
                  "error calling getOrderListByAddressUsingGET: ") +
                  localVarResponse.reason_phrase(),
              std::make_shared<std::stringstream>(
                  localVarResponse.extract_utf8string(true).get()));
        }

        // check response content type
        if (localVarResponse.headers().has(
                utility::conversions::to_string_t("Content-Type"))) {
          utility::string_t localVarContentType =
              localVarResponse
                  .headers()[utility::conversions::to_string_t("Content-Type")];
          if (localVarContentType.find(localVarResponseHttpContentType) ==
              std::string::npos) {
            throw ApiException(
                500,
                utility::conversions::to_string_t(
                    "error calling getOrderListByAddressUsingGET: unexpected "
                    "response type: ") +
                    localVarContentType,
                std::make_shared<std::stringstream>(
                    localVarResponse.extract_utf8string(true).get()));
          }
        }

        return localVarResponse.extract_string();
      })
      .then([=](utility::string_t localVarResponse) {
        std::shared_ptr<BaseResponseMapstringobject> localVarResult(
            new BaseResponseMapstringobject());

        if (localVarResponseHttpContentType ==
            utility::conversions::to_string_t("application/json")) {
          web::json::value localVarJson =
              web::json::value::parse(localVarResponse);

          ModelBase::fromJson(localVarJson, localVarResult);
        }
        // else if(localVarResponseHttpContentType ==
        // utility::conversions::to_string_t("multipart/form-data"))
        // {
        // TODO multipart response parsing
        // }
        else {
          throw ApiException(500,
                             utility::conversions::to_string_t(
                                 "error calling getOrderListByAddressUsingGET: "
                                 "unsupported response type"));
        }

        return localVarResult;
      });
}
pplx::task<std::shared_ptr<BaseResponseMapstringobject>>
TheOrderRelatedAPIApi::getQuoteExtendUsingPOST(
    boost::optional<utility::string_t> appKey,
    boost::optional<utility::string_t> expireTime,
    boost::optional<utility::string_t> signature,
    boost::optional<utility::string_t> timestamp,
    boost::optional<std::shared_ptr<OpenAPIInquiryParameters>> get_quote_extend)
    const {

  std::shared_ptr<const ApiConfiguration> localVarApiConfiguration(
      m_ApiClient->getConfiguration());
  utility::string_t localVarPath =
      utility::conversions::to_string_t("/open/v1/order/getQuoteExtend");

  std::map<utility::string_t, utility::string_t> localVarQueryParams;
  std::map<utility::string_t, utility::string_t> localVarHeaderParams(
      localVarApiConfiguration->getDefaultHeaders());
  std::map<utility::string_t, utility::string_t> localVarFormParams;
  std::map<utility::string_t, std::shared_ptr<HttpContent>> localVarFileParams;

  std::unordered_set<utility::string_t> localVarResponseHttpContentTypes;
  localVarResponseHttpContentTypes.insert(
      utility::conversions::to_string_t("*/*"));

  utility::string_t localVarResponseHttpContentType;

  // use JSON if possible
  if (localVarResponseHttpContentTypes.size() == 0) {
    localVarResponseHttpContentType =
        utility::conversions::to_string_t("application/json");
  }
  // JSON
  else if (localVarResponseHttpContentTypes.find(
               utility::conversions::to_string_t("application/json")) !=
           localVarResponseHttpContentTypes.end()) {
    localVarResponseHttpContentType =
        utility::conversions::to_string_t("application/json");
  }
  // multipart formdata
  else if (localVarResponseHttpContentTypes.find(
               utility::conversions::to_string_t("multipart/form-data")) !=
           localVarResponseHttpContentTypes.end()) {
    localVarResponseHttpContentType =
        utility::conversions::to_string_t("multipart/form-data");
  } else {
    throw ApiException(400,
                       utility::conversions::to_string_t(
                           "TheOrderRelatedAPIApi->getQuoteExtendUsingPOST "
                           "does not produce any supported media type"));
  }

  localVarHeaderParams[utility::conversions::to_string_t("Accept")] =
      localVarResponseHttpContentType;

  std::unordered_set<utility::string_t> localVarConsumeHttpContentTypes;
  localVarConsumeHttpContentTypes.insert(
      utility::conversions::to_string_t("application/json"));

  if (appKey) {
    localVarHeaderParams[utility::conversions::to_string_t("appKey")] =
        ApiClient::parameterToString(*appKey);
  }
  if (expireTime) {
    localVarHeaderParams[utility::conversions::to_string_t("expireTime")] =
        ApiClient::parameterToString(*expireTime);
  }
  if (signature) {
    localVarHeaderParams[utility::conversions::to_string_t("signature")] =
        ApiClient::parameterToString(*signature);
  }
  if (timestamp) {
    localVarHeaderParams[utility::conversions::to_string_t("timestamp")] =
        ApiClient::parameterToString(*timestamp);
  }

  std::shared_ptr<IHttpBody> localVarHttpBody;
  utility::string_t localVarRequestHttpContentType;

  // use JSON if possible
  if (localVarConsumeHttpContentTypes.size() == 0 ||
      localVarConsumeHttpContentTypes.find(utility::conversions::to_string_t(
          "application/json")) != localVarConsumeHttpContentTypes.end()) {
    localVarRequestHttpContentType =
        utility::conversions::to_string_t("application/json");
    web::json::value localVarJson;

    if (get_quote_extend)
      localVarJson = ModelBase::toJson(*get_quote_extend);

    localVarHttpBody = std::shared_ptr<IHttpBody>(new JsonBody(localVarJson));
  }
  // multipart formdata
  else if (localVarConsumeHttpContentTypes.find(
               utility::conversions::to_string_t("multipart/form-data")) !=
           localVarConsumeHttpContentTypes.end()) {
    localVarRequestHttpContentType =
        utility::conversions::to_string_t("multipart/form-data");
    std::shared_ptr<MultipartFormData> localVarMultipart(new MultipartFormData);

    if (get_quote_extend && (*get_quote_extend).get()) {
      (*get_quote_extend)
          ->toMultipart(localVarMultipart,
                        utility::conversions::to_string_t("get_quote_extend"));
    }

    localVarHttpBody = localVarMultipart;
    localVarRequestHttpContentType +=
        utility::conversions::to_string_t("; boundary=") +
        localVarMultipart->getBoundary();
  } else if (localVarConsumeHttpContentTypes.find(
                 utility::conversions::to_string_t(
                     "application/x-www-form-urlencoded")) !=
             localVarConsumeHttpContentTypes.end()) {
    localVarRequestHttpContentType =
        utility::conversions::to_string_t("application/x-www-form-urlencoded");
  } else {
    throw ApiException(415,
                       utility::conversions::to_string_t(
                           "TheOrderRelatedAPIApi->getQuoteExtendUsingPOST "
                           "does not consume any supported media type"));
  }

  return m_ApiClient
      ->callApi(localVarPath, utility::conversions::to_string_t("POST"),
                localVarQueryParams, localVarHttpBody, localVarHeaderParams,
                localVarFormParams, localVarFileParams,
                localVarRequestHttpContentType)
      .then([=](web::http::http_response localVarResponse) {
        if (m_ApiClient->getResponseHandler()) {
          m_ApiClient->getResponseHandler()(localVarResponse.status_code(),
                                            localVarResponse.headers());
        }

        // 1xx - informational : OK
        // 2xx - successful       : OK
        // 3xx - redirection   : OK
        // 4xx - client error  : not OK
        // 5xx - client error  : not OK
        if (localVarResponse.status_code() >= 400) {
          throw ApiException(
              localVarResponse.status_code(),
              utility::conversions::to_string_t(
                  "error calling getQuoteExtendUsingPOST: ") +
                  localVarResponse.reason_phrase(),
              std::make_shared<std::stringstream>(
                  localVarResponse.extract_utf8string(true).get()));
        }

        // check response content type
        if (localVarResponse.headers().has(
                utility::conversions::to_string_t("Content-Type"))) {
          utility::string_t localVarContentType =
              localVarResponse
                  .headers()[utility::conversions::to_string_t("Content-Type")];
          if (localVarContentType.find(localVarResponseHttpContentType) ==
              std::string::npos) {
            throw ApiException(
                500,
                utility::conversions::to_string_t(
                    "error calling getQuoteExtendUsingPOST: unexpected "
                    "response type: ") +
                    localVarContentType,
                std::make_shared<std::stringstream>(
                    localVarResponse.extract_utf8string(true).get()));
          }
        }

        return localVarResponse.extract_string();
      })
      .then([=](utility::string_t localVarResponse) {
        std::shared_ptr<BaseResponseMapstringobject> localVarResult(
            new BaseResponseMapstringobject());

        if (localVarResponseHttpContentType ==
            utility::conversions::to_string_t("application/json")) {
          web::json::value localVarJson =
              web::json::value::parse(localVarResponse);

          ModelBase::fromJson(localVarJson, localVarResult);
        }
        // else if(localVarResponseHttpContentType ==
        // utility::conversions::to_string_t("multipart/form-data"))
        // {
        // TODO multipart response parsing
        // }
        else {
          throw ApiException(500, utility::conversions::to_string_t(
                                      "error calling getQuoteExtendUsingPOST: "
                                      "unsupported response type"));
        }

        return localVarResult;
      });
}
pplx::task<std::shared_ptr<BaseResponseMapstringobject>>
TheOrderRelatedAPIApi::getTransferToMinterParamsUsingPOST(
    boost::optional<utility::string_t> appKey,
    boost::optional<utility::string_t> expireTime,
    boost::optional<utility::string_t> signature,
    boost::optional<utility::string_t> timestamp,
    boost::optional<std::shared_ptr<OpenAPIAndAppSubmissionToObtainAggregate>>
        get_transfer_to_minter_params) const {

  std::shared_ptr<const ApiConfiguration> localVarApiConfiguration(
      m_ApiClient->getConfiguration());
  utility::string_t localVarPath = utility::conversions::to_string_t(
      "/open/v1/order/getTransferToMinterParams");

  std::map<utility::string_t, utility::string_t> localVarQueryParams;
  std::map<utility::string_t, utility::string_t> localVarHeaderParams(
      localVarApiConfiguration->getDefaultHeaders());
  std::map<utility::string_t, utility::string_t> localVarFormParams;
  std::map<utility::string_t, std::shared_ptr<HttpContent>> localVarFileParams;

  std::unordered_set<utility::string_t> localVarResponseHttpContentTypes;
  localVarResponseHttpContentTypes.insert(
      utility::conversions::to_string_t("*/*"));

  utility::string_t localVarResponseHttpContentType;

  // use JSON if possible
  if (localVarResponseHttpContentTypes.size() == 0) {
    localVarResponseHttpContentType =
        utility::conversions::to_string_t("application/json");
  }
  // JSON
  else if (localVarResponseHttpContentTypes.find(
               utility::conversions::to_string_t("application/json")) !=
           localVarResponseHttpContentTypes.end()) {
    localVarResponseHttpContentType =
        utility::conversions::to_string_t("application/json");
  }
  // multipart formdata
  else if (localVarResponseHttpContentTypes.find(
               utility::conversions::to_string_t("multipart/form-data")) !=
           localVarResponseHttpContentTypes.end()) {
    localVarResponseHttpContentType =
        utility::conversions::to_string_t("multipart/form-data");
  } else {
    throw ApiException(
        400, utility::conversions::to_string_t(
                 "TheOrderRelatedAPIApi->getTransferToMinterParamsUsingPOST "
                 "does not produce any supported media type"));
  }

  localVarHeaderParams[utility::conversions::to_string_t("Accept")] =
      localVarResponseHttpContentType;

  std::unordered_set<utility::string_t> localVarConsumeHttpContentTypes;
  localVarConsumeHttpContentTypes.insert(
      utility::conversions::to_string_t("application/json"));

  if (appKey) {
    localVarHeaderParams[utility::conversions::to_string_t("appKey")] =
        ApiClient::parameterToString(*appKey);
  }
  if (expireTime) {
    localVarHeaderParams[utility::conversions::to_string_t("expireTime")] =
        ApiClient::parameterToString(*expireTime);
  }
  if (signature) {
    localVarHeaderParams[utility::conversions::to_string_t("signature")] =
        ApiClient::parameterToString(*signature);
  }
  if (timestamp) {
    localVarHeaderParams[utility::conversions::to_string_t("timestamp")] =
        ApiClient::parameterToString(*timestamp);
  }

  std::shared_ptr<IHttpBody> localVarHttpBody;
  utility::string_t localVarRequestHttpContentType;

  // use JSON if possible
  if (localVarConsumeHttpContentTypes.size() == 0 ||
      localVarConsumeHttpContentTypes.find(utility::conversions::to_string_t(
          "application/json")) != localVarConsumeHttpContentTypes.end()) {
    localVarRequestHttpContentType =
        utility::conversions::to_string_t("application/json");
    web::json::value localVarJson;

    if (get_transfer_to_minter_params)
      localVarJson = ModelBase::toJson(*get_transfer_to_minter_params);

    localVarHttpBody = std::shared_ptr<IHttpBody>(new JsonBody(localVarJson));
  }
  // multipart formdata
  else if (localVarConsumeHttpContentTypes.find(
               utility::conversions::to_string_t("multipart/form-data")) !=
           localVarConsumeHttpContentTypes.end()) {
    localVarRequestHttpContentType =
        utility::conversions::to_string_t("multipart/form-data");
    std::shared_ptr<MultipartFormData> localVarMultipart(new MultipartFormData);

    if (get_transfer_to_minter_params &&
        (*get_transfer_to_minter_params).get()) {
      (*get_transfer_to_minter_params)
          ->toMultipart(localVarMultipart,
                        utility::conversions::to_string_t(
                            "get_transfer_to_minter_params"));
    }

    localVarHttpBody = localVarMultipart;
    localVarRequestHttpContentType +=
        utility::conversions::to_string_t("; boundary=") +
        localVarMultipart->getBoundary();
  } else if (localVarConsumeHttpContentTypes.find(
                 utility::conversions::to_string_t(
                     "application/x-www-form-urlencoded")) !=
             localVarConsumeHttpContentTypes.end()) {
    localVarRequestHttpContentType =
        utility::conversions::to_string_t("application/x-www-form-urlencoded");
  } else {
    throw ApiException(
        415, utility::conversions::to_string_t(
                 "TheOrderRelatedAPIApi->getTransferToMinterParamsUsingPOST "
                 "does not consume any supported media type"));
  }

  return m_ApiClient
      ->callApi(localVarPath, utility::conversions::to_string_t("POST"),
                localVarQueryParams, localVarHttpBody, localVarHeaderParams,
                localVarFormParams, localVarFileParams,
                localVarRequestHttpContentType)
      .then([=](web::http::http_response localVarResponse) {
        if (m_ApiClient->getResponseHandler()) {
          m_ApiClient->getResponseHandler()(localVarResponse.status_code(),
                                            localVarResponse.headers());
        }

        // 1xx - informational : OK
        // 2xx - successful       : OK
        // 3xx - redirection   : OK
        // 4xx - client error  : not OK
        // 5xx - client error  : not OK
        if (localVarResponse.status_code() >= 400) {
          throw ApiException(
              localVarResponse.status_code(),
              utility::conversions::to_string_t(
                  "error calling getTransferToMinterParamsUsingPOST: ") +
                  localVarResponse.reason_phrase(),
              std::make_shared<std::stringstream>(
                  localVarResponse.extract_utf8string(true).get()));
        }

        // check response content type
        if (localVarResponse.headers().has(
                utility::conversions::to_string_t("Content-Type"))) {
          utility::string_t localVarContentType =
              localVarResponse
                  .headers()[utility::conversions::to_string_t("Content-Type")];
          if (localVarContentType.find(localVarResponseHttpContentType) ==
              std::string::npos) {
            throw ApiException(
                500,
                utility::conversions::to_string_t(
                    "error calling getTransferToMinterParamsUsingPOST: "
                    "unexpected response type: ") +
                    localVarContentType,
                std::make_shared<std::stringstream>(
                    localVarResponse.extract_utf8string(true).get()));
          }
        }

        return localVarResponse.extract_string();
      })
      .then([=](utility::string_t localVarResponse) {
        std::shared_ptr<BaseResponseMapstringobject> localVarResult(
            new BaseResponseMapstringobject());

        if (localVarResponseHttpContentType ==
            utility::conversions::to_string_t("application/json")) {
          web::json::value localVarJson =
              web::json::value::parse(localVarResponse);

          ModelBase::fromJson(localVarJson, localVarResult);
        }
        // else if(localVarResponseHttpContentType ==
        // utility::conversions::to_string_t("multipart/form-data"))
        // {
        // TODO multipart response parsing
        // }
        else {
          throw ApiException(
              500, utility::conversions::to_string_t(
                       "error calling getTransferToMinterParamsUsingPOST: "
                       "unsupported response type"));
        }

        return localVarResult;
      });
}
pplx::task<std::shared_ptr<BaseResponseMapstringobject>>
TheOrderRelatedAPIApi::getTransferToMinterRawUsingPOST(
    boost::optional<utility::string_t> appKey,
    boost::optional<utility::string_t> expireTime,
    boost::optional<utility::string_t> signature,
    boost::optional<utility::string_t> timestamp,
    boost::optional<std::shared_ptr<OpenAPIAndAppSubmissionToObtainAggregate>>
        get_transfer_to_minter_raw) const {

  std::shared_ptr<const ApiConfiguration> localVarApiConfiguration(
      m_ApiClient->getConfiguration());
  utility::string_t localVarPath = utility::conversions::to_string_t(
      "/open/v1/order/getTransferToMinterRaw");

  std::map<utility::string_t, utility::string_t> localVarQueryParams;
  std::map<utility::string_t, utility::string_t> localVarHeaderParams(
      localVarApiConfiguration->getDefaultHeaders());
  std::map<utility::string_t, utility::string_t> localVarFormParams;
  std::map<utility::string_t, std::shared_ptr<HttpContent>> localVarFileParams;

  std::unordered_set<utility::string_t> localVarResponseHttpContentTypes;
  localVarResponseHttpContentTypes.insert(
      utility::conversions::to_string_t("*/*"));

  utility::string_t localVarResponseHttpContentType;

  // use JSON if possible
  if (localVarResponseHttpContentTypes.size() == 0) {
    localVarResponseHttpContentType =
        utility::conversions::to_string_t("application/json");
  }
  // JSON
  else if (localVarResponseHttpContentTypes.find(
               utility::conversions::to_string_t("application/json")) !=
           localVarResponseHttpContentTypes.end()) {
    localVarResponseHttpContentType =
        utility::conversions::to_string_t("application/json");
  }
  // multipart formdata
  else if (localVarResponseHttpContentTypes.find(
               utility::conversions::to_string_t("multipart/form-data")) !=
           localVarResponseHttpContentTypes.end()) {
    localVarResponseHttpContentType =
        utility::conversions::to_string_t("multipart/form-data");
  } else {
    throw ApiException(
        400, utility::conversions::to_string_t(
                 "TheOrderRelatedAPIApi->getTransferToMinterRawUsingPOST does "
                 "not produce any supported media type"));
  }

  localVarHeaderParams[utility::conversions::to_string_t("Accept")] =
      localVarResponseHttpContentType;

  std::unordered_set<utility::string_t> localVarConsumeHttpContentTypes;
  localVarConsumeHttpContentTypes.insert(
      utility::conversions::to_string_t("application/json"));

  if (appKey) {
    localVarHeaderParams[utility::conversions::to_string_t("appKey")] =
        ApiClient::parameterToString(*appKey);
  }
  if (expireTime) {
    localVarHeaderParams[utility::conversions::to_string_t("expireTime")] =
        ApiClient::parameterToString(*expireTime);
  }
  if (signature) {
    localVarHeaderParams[utility::conversions::to_string_t("signature")] =
        ApiClient::parameterToString(*signature);
  }
  if (timestamp) {
    localVarHeaderParams[utility::conversions::to_string_t("timestamp")] =
        ApiClient::parameterToString(*timestamp);
  }

  std::shared_ptr<IHttpBody> localVarHttpBody;
  utility::string_t localVarRequestHttpContentType;

  // use JSON if possible
  if (localVarConsumeHttpContentTypes.size() == 0 ||
      localVarConsumeHttpContentTypes.find(utility::conversions::to_string_t(
          "application/json")) != localVarConsumeHttpContentTypes.end()) {
    localVarRequestHttpContentType =
        utility::conversions::to_string_t("application/json");
    web::json::value localVarJson;

    if (get_transfer_to_minter_raw)
      localVarJson = ModelBase::toJson(*get_transfer_to_minter_raw);

    localVarHttpBody = std::shared_ptr<IHttpBody>(new JsonBody(localVarJson));
  }
  // multipart formdata
  else if (localVarConsumeHttpContentTypes.find(
               utility::conversions::to_string_t("multipart/form-data")) !=
           localVarConsumeHttpContentTypes.end()) {
    localVarRequestHttpContentType =
        utility::conversions::to_string_t("multipart/form-data");
    std::shared_ptr<MultipartFormData> localVarMultipart(new MultipartFormData);

    if (get_transfer_to_minter_raw && (*get_transfer_to_minter_raw).get()) {
      (*get_transfer_to_minter_raw)
          ->toMultipart(localVarMultipart, utility::conversions::to_string_t(
                                               "get_transfer_to_minter_raw"));
    }

    localVarHttpBody = localVarMultipart;
    localVarRequestHttpContentType +=
        utility::conversions::to_string_t("; boundary=") +
        localVarMultipart->getBoundary();
  } else if (localVarConsumeHttpContentTypes.find(
                 utility::conversions::to_string_t(
                     "application/x-www-form-urlencoded")) !=
             localVarConsumeHttpContentTypes.end()) {
    localVarRequestHttpContentType =
        utility::conversions::to_string_t("application/x-www-form-urlencoded");
  } else {
    throw ApiException(
        415, utility::conversions::to_string_t(
                 "TheOrderRelatedAPIApi->getTransferToMinterRawUsingPOST does "
                 "not consume any supported media type"));
  }

  return m_ApiClient
      ->callApi(localVarPath, utility::conversions::to_string_t("POST"),
                localVarQueryParams, localVarHttpBody, localVarHeaderParams,
                localVarFormParams, localVarFileParams,
                localVarRequestHttpContentType)
      .then([=](web::http::http_response localVarResponse) {
        if (m_ApiClient->getResponseHandler()) {
          m_ApiClient->getResponseHandler()(localVarResponse.status_code(),
                                            localVarResponse.headers());
        }

        // 1xx - informational : OK
        // 2xx - successful       : OK
        // 3xx - redirection   : OK
        // 4xx - client error  : not OK
        // 5xx - client error  : not OK
        if (localVarResponse.status_code() >= 400) {
          throw ApiException(
              localVarResponse.status_code(),
              utility::conversions::to_string_t(
                  "error calling getTransferToMinterRawUsingPOST: ") +
                  localVarResponse.reason_phrase(),
              std::make_shared<std::stringstream>(
                  localVarResponse.extract_utf8string(true).get()));
        }

        // check response content type
        if (localVarResponse.headers().has(
                utility::conversions::to_string_t("Content-Type"))) {
          utility::string_t localVarContentType =
              localVarResponse
                  .headers()[utility::conversions::to_string_t("Content-Type")];
          if (localVarContentType.find(localVarResponseHttpContentType) ==
              std::string::npos) {
            throw ApiException(
                500,
                utility::conversions::to_string_t(
                    "error calling getTransferToMinterRawUsingPOST: unexpected "
                    "response type: ") +
                    localVarContentType,
                std::make_shared<std::stringstream>(
                    localVarResponse.extract_utf8string(true).get()));
          }
        }

        return localVarResponse.extract_string();
      })
      .then([=](utility::string_t localVarResponse) {
        std::shared_ptr<BaseResponseMapstringobject> localVarResult(
            new BaseResponseMapstringobject());

        if (localVarResponseHttpContentType ==
            utility::conversions::to_string_t("application/json")) {
          web::json::value localVarJson =
              web::json::value::parse(localVarResponse);

          ModelBase::fromJson(localVarJson, localVarResult);
        }
        // else if(localVarResponseHttpContentType ==
        // utility::conversions::to_string_t("multipart/form-data"))
        // {
        // TODO multipart response parsing
        // }
        else {
          throw ApiException(
              500, utility::conversions::to_string_t(
                       "error calling getTransferToMinterRawUsingPOST: "
                       "unsupported response type"));
        }

        return localVarResult;
      });
}
pplx::task<std::shared_ptr<BaseResponseMapstringobject>>
TheOrderRelatedAPIApi::submitAggregateUsingPOST(
    boost::optional<utility::string_t> appKey,
    boost::optional<utility::string_t> expireTime,
    boost::optional<utility::string_t> signature,
    boost::optional<utility::string_t> timestamp,
    boost::optional<std::shared_ptr<OpenAPIAndAppSubmitAggregateOrder>>
        submit_aggregate_order) const {

  std::shared_ptr<const ApiConfiguration> localVarApiConfiguration(
      m_ApiClient->getConfiguration());
  utility::string_t localVarPath =
      utility::conversions::to_string_t("/open/v1/order/submitAggregate");

  std::map<utility::string_t, utility::string_t> localVarQueryParams;
  std::map<utility::string_t, utility::string_t> localVarHeaderParams(
      localVarApiConfiguration->getDefaultHeaders());
  std::map<utility::string_t, utility::string_t> localVarFormParams;
  std::map<utility::string_t, std::shared_ptr<HttpContent>> localVarFileParams;

  std::unordered_set<utility::string_t> localVarResponseHttpContentTypes;
  localVarResponseHttpContentTypes.insert(
      utility::conversions::to_string_t("*/*"));

  utility::string_t localVarResponseHttpContentType;

  // use JSON if possible
  if (localVarResponseHttpContentTypes.size() == 0) {
    localVarResponseHttpContentType =
        utility::conversions::to_string_t("application/json");
  }
  // JSON
  else if (localVarResponseHttpContentTypes.find(
               utility::conversions::to_string_t("application/json")) !=
           localVarResponseHttpContentTypes.end()) {
    localVarResponseHttpContentType =
        utility::conversions::to_string_t("application/json");
  }
  // multipart formdata
  else if (localVarResponseHttpContentTypes.find(
               utility::conversions::to_string_t("multipart/form-data")) !=
           localVarResponseHttpContentTypes.end()) {
    localVarResponseHttpContentType =
        utility::conversions::to_string_t("multipart/form-data");
  } else {
    throw ApiException(400,
                       utility::conversions::to_string_t(
                           "TheOrderRelatedAPIApi->submitAggregateUsingPOST "
                           "does not produce any supported media type"));
  }

  localVarHeaderParams[utility::conversions::to_string_t("Accept")] =
      localVarResponseHttpContentType;

  std::unordered_set<utility::string_t> localVarConsumeHttpContentTypes;
  localVarConsumeHttpContentTypes.insert(
      utility::conversions::to_string_t("application/json"));

  if (appKey) {
    localVarHeaderParams[utility::conversions::to_string_t("appKey")] =
        ApiClient::parameterToString(*appKey);
  }
  if (expireTime) {
    localVarHeaderParams[utility::conversions::to_string_t("expireTime")] =
        ApiClient::parameterToString(*expireTime);
  }
  if (signature) {
    localVarHeaderParams[utility::conversions::to_string_t("signature")] =
        ApiClient::parameterToString(*signature);
  }
  if (timestamp) {
    localVarHeaderParams[utility::conversions::to_string_t("timestamp")] =
        ApiClient::parameterToString(*timestamp);
  }

  std::shared_ptr<IHttpBody> localVarHttpBody;
  utility::string_t localVarRequestHttpContentType;

  // use JSON if possible
  if (localVarConsumeHttpContentTypes.size() == 0 ||
      localVarConsumeHttpContentTypes.find(utility::conversions::to_string_t(
          "application/json")) != localVarConsumeHttpContentTypes.end()) {
    localVarRequestHttpContentType =
        utility::conversions::to_string_t("application/json");
    web::json::value localVarJson;

    if (submit_aggregate_order)
      localVarJson = ModelBase::toJson(*submit_aggregate_order);

    localVarHttpBody = std::shared_ptr<IHttpBody>(new JsonBody(localVarJson));
  }
  // multipart formdata
  else if (localVarConsumeHttpContentTypes.find(
               utility::conversions::to_string_t("multipart/form-data")) !=
           localVarConsumeHttpContentTypes.end()) {
    localVarRequestHttpContentType =
        utility::conversions::to_string_t("multipart/form-data");
    std::shared_ptr<MultipartFormData> localVarMultipart(new MultipartFormData);

    if (submit_aggregate_order && (*submit_aggregate_order).get()) {
      (*submit_aggregate_order)
          ->toMultipart(localVarMultipart, utility::conversions::to_string_t(
                                               "submit_aggregate_order"));
    }

    localVarHttpBody = localVarMultipart;
    localVarRequestHttpContentType +=
        utility::conversions::to_string_t("; boundary=") +
        localVarMultipart->getBoundary();
  } else if (localVarConsumeHttpContentTypes.find(
                 utility::conversions::to_string_t(
                     "application/x-www-form-urlencoded")) !=
             localVarConsumeHttpContentTypes.end()) {
    localVarRequestHttpContentType =
        utility::conversions::to_string_t("application/x-www-form-urlencoded");
  } else {
    throw ApiException(415,
                       utility::conversions::to_string_t(
                           "TheOrderRelatedAPIApi->submitAggregateUsingPOST "
                           "does not consume any supported media type"));
  }

  return m_ApiClient
      ->callApi(localVarPath, utility::conversions::to_string_t("POST"),
                localVarQueryParams, localVarHttpBody, localVarHeaderParams,
                localVarFormParams, localVarFileParams,
                localVarRequestHttpContentType)
      .then([=](web::http::http_response localVarResponse) {
        if (m_ApiClient->getResponseHandler()) {
          m_ApiClient->getResponseHandler()(localVarResponse.status_code(),
                                            localVarResponse.headers());
        }

        // 1xx - informational : OK
        // 2xx - successful       : OK
        // 3xx - redirection   : OK
        // 4xx - client error  : not OK
        // 5xx - client error  : not OK
        if (localVarResponse.status_code() >= 400) {
          throw ApiException(
              localVarResponse.status_code(),
              utility::conversions::to_string_t(
                  "error calling submitAggregateUsingPOST: ") +
                  localVarResponse.reason_phrase(),
              std::make_shared<std::stringstream>(
                  localVarResponse.extract_utf8string(true).get()));
        }

        // check response content type
        if (localVarResponse.headers().has(
                utility::conversions::to_string_t("Content-Type"))) {
          utility::string_t localVarContentType =
              localVarResponse
                  .headers()[utility::conversions::to_string_t("Content-Type")];
          if (localVarContentType.find(localVarResponseHttpContentType) ==
              std::string::npos) {
            throw ApiException(
                500,
                utility::conversions::to_string_t(
                    "error calling submitAggregateUsingPOST: unexpected "
                    "response type: ") +
                    localVarContentType,
                std::make_shared<std::stringstream>(
                    localVarResponse.extract_utf8string(true).get()));
          }
        }

        return localVarResponse.extract_string();
      })
      .then([=](utility::string_t localVarResponse) {
        std::shared_ptr<BaseResponseMapstringobject> localVarResult(
            new BaseResponseMapstringobject());

        if (localVarResponseHttpContentType ==
            utility::conversions::to_string_t("application/json")) {
          web::json::value localVarJson =
              web::json::value::parse(localVarResponse);

          ModelBase::fromJson(localVarJson, localVarResult);
        }
        // else if(localVarResponseHttpContentType ==
        // utility::conversions::to_string_t("multipart/form-data"))
        // {
        // TODO multipart response parsing
        // }
        else {
          throw ApiException(500, utility::conversions::to_string_t(
                                      "error calling submitAggregateUsingPOST: "
                                      "unsupported response type"));
        }

        return localVarResult;
      });
}
pplx::task<std::shared_ptr<BaseResponseMapstringobject>>
TheOrderRelatedAPIApi::submitCrossChainUsingPOST(
    boost::optional<utility::string_t> appKey,
    boost::optional<utility::string_t> expireTime,
    boost::optional<utility::string_t> signature,
    boost::optional<utility::string_t> timestamp,
    boost::optional<std::shared_ptr<OpenAPIAndAppSubmitCrossChainOrder>>
        submit_cross_chain_order) const {

  std::shared_ptr<const ApiConfiguration> localVarApiConfiguration(
      m_ApiClient->getConfiguration());
  utility::string_t localVarPath =
      utility::conversions::to_string_t("/open/v1/order/submitCrossChain");

  std::map<utility::string_t, utility::string_t> localVarQueryParams;
  std::map<utility::string_t, utility::string_t> localVarHeaderParams(
      localVarApiConfiguration->getDefaultHeaders());
  std::map<utility::string_t, utility::string_t> localVarFormParams;
  std::map<utility::string_t, std::shared_ptr<HttpContent>> localVarFileParams;

  std::unordered_set<utility::string_t> localVarResponseHttpContentTypes;
  localVarResponseHttpContentTypes.insert(
      utility::conversions::to_string_t("*/*"));

  utility::string_t localVarResponseHttpContentType;

  // use JSON if possible
  if (localVarResponseHttpContentTypes.size() == 0) {
    localVarResponseHttpContentType =
        utility::conversions::to_string_t("application/json");
  }
  // JSON
  else if (localVarResponseHttpContentTypes.find(
               utility::conversions::to_string_t("application/json")) !=
           localVarResponseHttpContentTypes.end()) {
    localVarResponseHttpContentType =
        utility::conversions::to_string_t("application/json");
  }
  // multipart formdata
  else if (localVarResponseHttpContentTypes.find(
               utility::conversions::to_string_t("multipart/form-data")) !=
           localVarResponseHttpContentTypes.end()) {
    localVarResponseHttpContentType =
        utility::conversions::to_string_t("multipart/form-data");
  } else {
    throw ApiException(400,
                       utility::conversions::to_string_t(
                           "TheOrderRelatedAPIApi->submitCrossChainUsingPOST "
                           "does not produce any supported media type"));
  }

  localVarHeaderParams[utility::conversions::to_string_t("Accept")] =
      localVarResponseHttpContentType;

  std::unordered_set<utility::string_t> localVarConsumeHttpContentTypes;
  localVarConsumeHttpContentTypes.insert(
      utility::conversions::to_string_t("application/json"));

  if (appKey) {
    localVarHeaderParams[utility::conversions::to_string_t("appKey")] =
        ApiClient::parameterToString(*appKey);
  }
  if (expireTime) {
    localVarHeaderParams[utility::conversions::to_string_t("expireTime")] =
        ApiClient::parameterToString(*expireTime);
  }
  if (signature) {
    localVarHeaderParams[utility::conversions::to_string_t("signature")] =
        ApiClient::parameterToString(*signature);
  }
  if (timestamp) {
    localVarHeaderParams[utility::conversions::to_string_t("timestamp")] =
        ApiClient::parameterToString(*timestamp);
  }

  std::shared_ptr<IHttpBody> localVarHttpBody;
  utility::string_t localVarRequestHttpContentType;

  // use JSON if possible
  if (localVarConsumeHttpContentTypes.size() == 0 ||
      localVarConsumeHttpContentTypes.find(utility::conversions::to_string_t(
          "application/json")) != localVarConsumeHttpContentTypes.end()) {
    localVarRequestHttpContentType =
        utility::conversions::to_string_t("application/json");
    web::json::value localVarJson;

    if (submit_cross_chain_order)
      localVarJson = ModelBase::toJson(*submit_cross_chain_order);

    localVarHttpBody = std::shared_ptr<IHttpBody>(new JsonBody(localVarJson));
  }
  // multipart formdata
  else if (localVarConsumeHttpContentTypes.find(
               utility::conversions::to_string_t("multipart/form-data")) !=
           localVarConsumeHttpContentTypes.end()) {
    localVarRequestHttpContentType =
        utility::conversions::to_string_t("multipart/form-data");
    std::shared_ptr<MultipartFormData> localVarMultipart(new MultipartFormData);

    if (submit_cross_chain_order && (*submit_cross_chain_order).get()) {
      (*submit_cross_chain_order)
          ->toMultipart(localVarMultipart, utility::conversions::to_string_t(
                                               "submit_cross_chain_order"));
    }

    localVarHttpBody = localVarMultipart;
    localVarRequestHttpContentType +=
        utility::conversions::to_string_t("; boundary=") +
        localVarMultipart->getBoundary();
  } else if (localVarConsumeHttpContentTypes.find(
                 utility::conversions::to_string_t(
                     "application/x-www-form-urlencoded")) !=
             localVarConsumeHttpContentTypes.end()) {
    localVarRequestHttpContentType =
        utility::conversions::to_string_t("application/x-www-form-urlencoded");
  } else {
    throw ApiException(415,
                       utility::conversions::to_string_t(
                           "TheOrderRelatedAPIApi->submitCrossChainUsingPOST "
                           "does not consume any supported media type"));
  }

  return m_ApiClient
      ->callApi(localVarPath, utility::conversions::to_string_t("POST"),
                localVarQueryParams, localVarHttpBody, localVarHeaderParams,
                localVarFormParams, localVarFileParams,
                localVarRequestHttpContentType)
      .then([=](web::http::http_response localVarResponse) {
        if (m_ApiClient->getResponseHandler()) {
          m_ApiClient->getResponseHandler()(localVarResponse.status_code(),
                                            localVarResponse.headers());
        }

        // 1xx - informational : OK
        // 2xx - successful       : OK
        // 3xx - redirection   : OK
        // 4xx - client error  : not OK
        // 5xx - client error  : not OK
        if (localVarResponse.status_code() >= 400) {
          throw ApiException(
              localVarResponse.status_code(),
              utility::conversions::to_string_t(
                  "error calling submitCrossChainUsingPOST: ") +
                  localVarResponse.reason_phrase(),
              std::make_shared<std::stringstream>(
                  localVarResponse.extract_utf8string(true).get()));
        }

        // check response content type
        if (localVarResponse.headers().has(
                utility::conversions::to_string_t("Content-Type"))) {
          utility::string_t localVarContentType =
              localVarResponse
                  .headers()[utility::conversions::to_string_t("Content-Type")];
          if (localVarContentType.find(localVarResponseHttpContentType) ==
              std::string::npos) {
            throw ApiException(
                500,
                utility::conversions::to_string_t(
                    "error calling submitCrossChainUsingPOST: unexpected "
                    "response type: ") +
                    localVarContentType,
                std::make_shared<std::stringstream>(
                    localVarResponse.extract_utf8string(true).get()));
          }
        }

        return localVarResponse.extract_string();
      })
      .then([=](utility::string_t localVarResponse) {
        std::shared_ptr<BaseResponseMapstringobject> localVarResult(
            new BaseResponseMapstringobject());

        if (localVarResponseHttpContentType ==
            utility::conversions::to_string_t("application/json")) {
          web::json::value localVarJson =
              web::json::value::parse(localVarResponse);

          ModelBase::fromJson(localVarJson, localVarResult);
        }
        // else if(localVarResponseHttpContentType ==
        // utility::conversions::to_string_t("multipart/form-data"))
        // {
        // TODO multipart response parsing
        // }
        else {
          throw ApiException(500,
                             utility::conversions::to_string_t(
                                 "error calling submitCrossChainUsingPOST: "
                                 "unsupported response type"));
        }

        return localVarResult;
      });
}
pplx::task<std::shared_ptr<BaseResponseMapstringobject>>
TheOrderRelatedAPIApi::submitOrderExtendUsingPOST(
    boost::optional<utility::string_t> appKey,
    boost::optional<utility::string_t> expireTime,
    boost::optional<utility::string_t> signature,
    boost::optional<utility::string_t> timestamp,
    boost::optional<std::shared_ptr<OpenAPIAndAppSubmitOrder>>
        submit_order_extend) const {

  std::shared_ptr<const ApiConfiguration> localVarApiConfiguration(
      m_ApiClient->getConfiguration());
  utility::string_t localVarPath =
      utility::conversions::to_string_t("/open/v1/order/submitOrderExtend");

  std::map<utility::string_t, utility::string_t> localVarQueryParams;
  std::map<utility::string_t, utility::string_t> localVarHeaderParams(
      localVarApiConfiguration->getDefaultHeaders());
  std::map<utility::string_t, utility::string_t> localVarFormParams;
  std::map<utility::string_t, std::shared_ptr<HttpContent>> localVarFileParams;

  std::unordered_set<utility::string_t> localVarResponseHttpContentTypes;
  localVarResponseHttpContentTypes.insert(
      utility::conversions::to_string_t("*/*"));

  utility::string_t localVarResponseHttpContentType;

  // use JSON if possible
  if (localVarResponseHttpContentTypes.size() == 0) {
    localVarResponseHttpContentType =
        utility::conversions::to_string_t("application/json");
  }
  // JSON
  else if (localVarResponseHttpContentTypes.find(
               utility::conversions::to_string_t("application/json")) !=
           localVarResponseHttpContentTypes.end()) {
    localVarResponseHttpContentType =
        utility::conversions::to_string_t("application/json");
  }
  // multipart formdata
  else if (localVarResponseHttpContentTypes.find(
               utility::conversions::to_string_t("multipart/form-data")) !=
           localVarResponseHttpContentTypes.end()) {
    localVarResponseHttpContentType =
        utility::conversions::to_string_t("multipart/form-data");
  } else {
    throw ApiException(400,
                       utility::conversions::to_string_t(
                           "TheOrderRelatedAPIApi->submitOrderExtendUsingPOST "
                           "does not produce any supported media type"));
  }

  localVarHeaderParams[utility::conversions::to_string_t("Accept")] =
      localVarResponseHttpContentType;

  std::unordered_set<utility::string_t> localVarConsumeHttpContentTypes;
  localVarConsumeHttpContentTypes.insert(
      utility::conversions::to_string_t("application/json"));

  if (appKey) {
    localVarHeaderParams[utility::conversions::to_string_t("appKey")] =
        ApiClient::parameterToString(*appKey);
  }
  if (expireTime) {
    localVarHeaderParams[utility::conversions::to_string_t("expireTime")] =
        ApiClient::parameterToString(*expireTime);
  }
  if (signature) {
    localVarHeaderParams[utility::conversions::to_string_t("signature")] =
        ApiClient::parameterToString(*signature);
  }
  if (timestamp) {
    localVarHeaderParams[utility::conversions::to_string_t("timestamp")] =
        ApiClient::parameterToString(*timestamp);
  }

  std::shared_ptr<IHttpBody> localVarHttpBody;
  utility::string_t localVarRequestHttpContentType;

  // use JSON if possible
  if (localVarConsumeHttpContentTypes.size() == 0 ||
      localVarConsumeHttpContentTypes.find(utility::conversions::to_string_t(
          "application/json")) != localVarConsumeHttpContentTypes.end()) {
    localVarRequestHttpContentType =
        utility::conversions::to_string_t("application/json");
    web::json::value localVarJson;

    if (submit_order_extend)
      localVarJson = ModelBase::toJson(*submit_order_extend);

    localVarHttpBody = std::shared_ptr<IHttpBody>(new JsonBody(localVarJson));
  }
  // multipart formdata
  else if (localVarConsumeHttpContentTypes.find(
               utility::conversions::to_string_t("multipart/form-data")) !=
           localVarConsumeHttpContentTypes.end()) {
    localVarRequestHttpContentType =
        utility::conversions::to_string_t("multipart/form-data");
    std::shared_ptr<MultipartFormData> localVarMultipart(new MultipartFormData);

    if (submit_order_extend && (*submit_order_extend).get()) {
      (*submit_order_extend)
          ->toMultipart(localVarMultipart, utility::conversions::to_string_t(
                                               "submit_order_extend"));
    }

    localVarHttpBody = localVarMultipart;
    localVarRequestHttpContentType +=
        utility::conversions::to_string_t("; boundary=") +
        localVarMultipart->getBoundary();
  } else if (localVarConsumeHttpContentTypes.find(
                 utility::conversions::to_string_t(
                     "application/x-www-form-urlencoded")) !=
             localVarConsumeHttpContentTypes.end()) {
    localVarRequestHttpContentType =
        utility::conversions::to_string_t("application/x-www-form-urlencoded");
  } else {
    throw ApiException(415,
                       utility::conversions::to_string_t(
                           "TheOrderRelatedAPIApi->submitOrderExtendUsingPOST "
                           "does not consume any supported media type"));
  }

  return m_ApiClient
      ->callApi(localVarPath, utility::conversions::to_string_t("POST"),
                localVarQueryParams, localVarHttpBody, localVarHeaderParams,
                localVarFormParams, localVarFileParams,
                localVarRequestHttpContentType)
      .then([=](web::http::http_response localVarResponse) {
        if (m_ApiClient->getResponseHandler()) {
          m_ApiClient->getResponseHandler()(localVarResponse.status_code(),
                                            localVarResponse.headers());
        }

        // 1xx - informational : OK
        // 2xx - successful       : OK
        // 3xx - redirection   : OK
        // 4xx - client error  : not OK
        // 5xx - client error  : not OK
        if (localVarResponse.status_code() >= 400) {
          throw ApiException(
              localVarResponse.status_code(),
              utility::conversions::to_string_t(
                  "error calling submitOrderExtendUsingPOST: ") +
                  localVarResponse.reason_phrase(),
              std::make_shared<std::stringstream>(
                  localVarResponse.extract_utf8string(true).get()));
        }

        // check response content type
        if (localVarResponse.headers().has(
                utility::conversions::to_string_t("Content-Type"))) {
          utility::string_t localVarContentType =
              localVarResponse
                  .headers()[utility::conversions::to_string_t("Content-Type")];
          if (localVarContentType.find(localVarResponseHttpContentType) ==
              std::string::npos) {
            throw ApiException(
                500,
                utility::conversions::to_string_t(
                    "error calling submitOrderExtendUsingPOST: unexpected "
                    "response type: ") +
                    localVarContentType,
                std::make_shared<std::stringstream>(
                    localVarResponse.extract_utf8string(true).get()));
          }
        }

        return localVarResponse.extract_string();
      })
      .then([=](utility::string_t localVarResponse) {
        std::shared_ptr<BaseResponseMapstringobject> localVarResult(
            new BaseResponseMapstringobject());

        if (localVarResponseHttpContentType ==
            utility::conversions::to_string_t("application/json")) {
          web::json::value localVarJson =
              web::json::value::parse(localVarResponse);

          ModelBase::fromJson(localVarJson, localVarResult);
        }
        // else if(localVarResponseHttpContentType ==
        // utility::conversions::to_string_t("multipart/form-data"))
        // {
        // TODO multipart response parsing
        // }
        else {
          throw ApiException(500,
                             utility::conversions::to_string_t(
                                 "error calling submitOrderExtendUsingPOST: "
                                 "unsupported response type"));
        }

        return localVarResult;
      });
}
pplx::task<std::shared_ptr<BaseResponseMapstringobject>>
TheOrderRelatedAPIApi::submitProxyTaskUsingPOST(
    boost::optional<utility::string_t> appKey,
    boost::optional<utility::string_t> expireTime,
    boost::optional<utility::string_t> signature,
    boost::optional<utility::string_t> timestamp,
    boost::optional<std::map<utility::string_t, std::shared_ptr<Object>>>
        submit_Proxy_Task_params) const {

  std::shared_ptr<const ApiConfiguration> localVarApiConfiguration(
      m_ApiClient->getConfiguration());
  utility::string_t localVarPath =
      utility::conversions::to_string_t("/open/v1/order/submitProxyTask");

  std::map<utility::string_t, utility::string_t> localVarQueryParams;
  std::map<utility::string_t, utility::string_t> localVarHeaderParams(
      localVarApiConfiguration->getDefaultHeaders());
  std::map<utility::string_t, utility::string_t> localVarFormParams;
  std::map<utility::string_t, std::shared_ptr<HttpContent>> localVarFileParams;

  std::unordered_set<utility::string_t> localVarResponseHttpContentTypes;
  localVarResponseHttpContentTypes.insert(
      utility::conversions::to_string_t("*/*"));

  utility::string_t localVarResponseHttpContentType;

  // use JSON if possible
  if (localVarResponseHttpContentTypes.size() == 0) {
    localVarResponseHttpContentType =
        utility::conversions::to_string_t("application/json");
  }
  // JSON
  else if (localVarResponseHttpContentTypes.find(
               utility::conversions::to_string_t("application/json")) !=
           localVarResponseHttpContentTypes.end()) {
    localVarResponseHttpContentType =
        utility::conversions::to_string_t("application/json");
  }
  // multipart formdata
  else if (localVarResponseHttpContentTypes.find(
               utility::conversions::to_string_t("multipart/form-data")) !=
           localVarResponseHttpContentTypes.end()) {
    localVarResponseHttpContentType =
        utility::conversions::to_string_t("multipart/form-data");
  } else {
    throw ApiException(400,
                       utility::conversions::to_string_t(
                           "TheOrderRelatedAPIApi->submitProxyTaskUsingPOST "
                           "does not produce any supported media type"));
  }

  localVarHeaderParams[utility::conversions::to_string_t("Accept")] =
      localVarResponseHttpContentType;

  std::unordered_set<utility::string_t> localVarConsumeHttpContentTypes;
  localVarConsumeHttpContentTypes.insert(
      utility::conversions::to_string_t("application/json"));

  if (appKey) {
    localVarHeaderParams[utility::conversions::to_string_t("appKey")] =
        ApiClient::parameterToString(*appKey);
  }
  if (expireTime) {
    localVarHeaderParams[utility::conversions::to_string_t("expireTime")] =
        ApiClient::parameterToString(*expireTime);
  }
  if (signature) {
    localVarHeaderParams[utility::conversions::to_string_t("signature")] =
        ApiClient::parameterToString(*signature);
  }
  if (timestamp) {
    localVarHeaderParams[utility::conversions::to_string_t("timestamp")] =
        ApiClient::parameterToString(*timestamp);
  }

  std::shared_ptr<IHttpBody> localVarHttpBody;
  utility::string_t localVarRequestHttpContentType;

  // use JSON if possible
  if (localVarConsumeHttpContentTypes.size() == 0 ||
      localVarConsumeHttpContentTypes.find(utility::conversions::to_string_t(
          "application/json")) != localVarConsumeHttpContentTypes.end()) {
    localVarRequestHttpContentType =
        utility::conversions::to_string_t("application/json");
    web::json::value localVarJson;

    if (submit_Proxy_Task_params)
      localVarJson = ModelBase::toJson(*submit_Proxy_Task_params);

    localVarHttpBody = std::shared_ptr<IHttpBody>(new JsonBody(localVarJson));
  }
  // multipart formdata
  else if (localVarConsumeHttpContentTypes.find(
               utility::conversions::to_string_t("multipart/form-data")) !=
           localVarConsumeHttpContentTypes.end()) {
    localVarRequestHttpContentType =
        utility::conversions::to_string_t("multipart/form-data");
    std::shared_ptr<MultipartFormData> localVarMultipart(new MultipartFormData);

    {
      std::map<utility::string_t, web::json::value> localVarJsonMap;
      for (auto &localVarItem : submit_Proxy_Task_params.get()) {
        web::json::value jval;
        localVarJsonMap.insert(std::pair<utility::string_t, web::json::value>(
            localVarItem.first, ModelBase::toJson(localVarItem.second)));
      }
      localVarMultipart->add(ModelBase::toHttpContent(
          utility::conversions::to_string_t("submit_Proxy_Task_params"),
          localVarJsonMap,
          utility::conversions::to_string_t("application/json")));
    }

    localVarHttpBody = localVarMultipart;
    localVarRequestHttpContentType +=
        utility::conversions::to_string_t("; boundary=") +
        localVarMultipart->getBoundary();
  } else if (localVarConsumeHttpContentTypes.find(
                 utility::conversions::to_string_t(
                     "application/x-www-form-urlencoded")) !=
             localVarConsumeHttpContentTypes.end()) {
    localVarRequestHttpContentType =
        utility::conversions::to_string_t("application/x-www-form-urlencoded");
  } else {
    throw ApiException(415,
                       utility::conversions::to_string_t(
                           "TheOrderRelatedAPIApi->submitProxyTaskUsingPOST "
                           "does not consume any supported media type"));
  }

  return m_ApiClient
      ->callApi(localVarPath, utility::conversions::to_string_t("POST"),
                localVarQueryParams, localVarHttpBody, localVarHeaderParams,
                localVarFormParams, localVarFileParams,
                localVarRequestHttpContentType)
      .then([=](web::http::http_response localVarResponse) {
        if (m_ApiClient->getResponseHandler()) {
          m_ApiClient->getResponseHandler()(localVarResponse.status_code(),
                                            localVarResponse.headers());
        }

        // 1xx - informational : OK
        // 2xx - successful       : OK
        // 3xx - redirection   : OK
        // 4xx - client error  : not OK
        // 5xx - client error  : not OK
        if (localVarResponse.status_code() >= 400) {
          throw ApiException(
              localVarResponse.status_code(),
              utility::conversions::to_string_t(
                  "error calling submitProxyTaskUsingPOST: ") +
                  localVarResponse.reason_phrase(),
              std::make_shared<std::stringstream>(
                  localVarResponse.extract_utf8string(true).get()));
        }

        // check response content type
        if (localVarResponse.headers().has(
                utility::conversions::to_string_t("Content-Type"))) {
          utility::string_t localVarContentType =
              localVarResponse
                  .headers()[utility::conversions::to_string_t("Content-Type")];
          if (localVarContentType.find(localVarResponseHttpContentType) ==
              std::string::npos) {
            throw ApiException(
                500,
                utility::conversions::to_string_t(
                    "error calling submitProxyTaskUsingPOST: unexpected "
                    "response type: ") +
                    localVarContentType,
                std::make_shared<std::stringstream>(
                    localVarResponse.extract_utf8string(true).get()));
          }
        }

        return localVarResponse.extract_string();
      })
      .then([=](utility::string_t localVarResponse) {
        std::shared_ptr<BaseResponseMapstringobject> localVarResult(
            new BaseResponseMapstringobject());

        if (localVarResponseHttpContentType ==
            utility::conversions::to_string_t("application/json")) {
          web::json::value localVarJson =
              web::json::value::parse(localVarResponse);

          ModelBase::fromJson(localVarJson, localVarResult);
        }
        // else if(localVarResponseHttpContentType ==
        // utility::conversions::to_string_t("multipart/form-data"))
        // {
        // TODO multipart response parsing
        // }
        else {
          throw ApiException(500, utility::conversions::to_string_t(
                                      "error calling submitProxyTaskUsingPOST: "
                                      "unsupported response type"));
        }

        return localVarResult;
      });
}

} // namespace api
} // namespace client
} // namespace openapitools
} // namespace org
