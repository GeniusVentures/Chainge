/**
 * Open API
 * Open API
 *
 * The version of the OpenAPI document: 1.0
 * Contact: liuxiaobin@chainge.finance
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.5.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "CppRestOpenAPIClient/api/TheAccountRelatedAPIApi.h"
#include "CppRestOpenAPIClient/IHttpBody.h"
#include "CppRestOpenAPIClient/JsonBody.h"
#include "CppRestOpenAPIClient/MultipartFormData.h"

#include <boost/algorithm/string/replace.hpp>

#include <unordered_set>

namespace org {
namespace openapitools {
namespace client {
namespace api {

using namespace org::openapitools::client::model;

TheAccountRelatedAPIApi::TheAccountRelatedAPIApi(
    std::shared_ptr<const ApiClient> apiClient)
    : m_ApiClient(apiClient) {}

TheAccountRelatedAPIApi::~TheAccountRelatedAPIApi() {}

pplx::task<std::shared_ptr<BaseResponseMapstringobject>>
TheAccountRelatedAPIApi::bindAddressUsingPOST(
    boost::optional<utility::string_t> appKey,
    boost::optional<utility::string_t> expireTime,
    boost::optional<utility::string_t> signature,
    boost::optional<utility::string_t> timestamp,
    boost::optional<std::shared_ptr<AppBindAddressParameters>>
        bind_non_EVM_address) const {

  std::shared_ptr<const ApiConfiguration> localVarApiConfiguration(
      m_ApiClient->getConfiguration());
  utility::string_t localVarPath =
      utility::conversions::to_string_t("/open/v1/account/bindAddress");

  std::map<utility::string_t, utility::string_t> localVarQueryParams;
  std::map<utility::string_t, utility::string_t> localVarHeaderParams(
      localVarApiConfiguration->getDefaultHeaders());
  std::map<utility::string_t, utility::string_t> localVarFormParams;
  std::map<utility::string_t, std::shared_ptr<HttpContent>> localVarFileParams;

  std::unordered_set<utility::string_t> localVarResponseHttpContentTypes;
  localVarResponseHttpContentTypes.insert(
      utility::conversions::to_string_t("*/*"));

  utility::string_t localVarResponseHttpContentType;

  // use JSON if possible
  if (localVarResponseHttpContentTypes.size() == 0) {
    localVarResponseHttpContentType =
        utility::conversions::to_string_t("application/json");
  }
  // JSON
  else if (localVarResponseHttpContentTypes.find(
               utility::conversions::to_string_t("application/json")) !=
           localVarResponseHttpContentTypes.end()) {
    localVarResponseHttpContentType =
        utility::conversions::to_string_t("application/json");
  }
  // multipart formdata
  else if (localVarResponseHttpContentTypes.find(
               utility::conversions::to_string_t("multipart/form-data")) !=
           localVarResponseHttpContentTypes.end()) {
    localVarResponseHttpContentType =
        utility::conversions::to_string_t("multipart/form-data");
  } else {
    throw ApiException(400, utility::conversions::to_string_t(
                                "TheAccountRelatedAPIApi->bindAddressUsingPOST "
                                "does not produce any supported media type"));
  }

  localVarHeaderParams[utility::conversions::to_string_t("Accept")] =
      localVarResponseHttpContentType;

  std::unordered_set<utility::string_t> localVarConsumeHttpContentTypes;
  localVarConsumeHttpContentTypes.insert(
      utility::conversions::to_string_t("application/json"));

  if (appKey) {
    localVarHeaderParams[utility::conversions::to_string_t("appKey")] =
        ApiClient::parameterToString(*appKey);
  }
  if (expireTime) {
    localVarHeaderParams[utility::conversions::to_string_t("expireTime")] =
        ApiClient::parameterToString(*expireTime);
  }
  if (signature) {
    localVarHeaderParams[utility::conversions::to_string_t("signature")] =
        ApiClient::parameterToString(*signature);
  }
  if (timestamp) {
    localVarHeaderParams[utility::conversions::to_string_t("timestamp")] =
        ApiClient::parameterToString(*timestamp);
  }

  std::shared_ptr<IHttpBody> localVarHttpBody;
  utility::string_t localVarRequestHttpContentType;

  // use JSON if possible
  if (localVarConsumeHttpContentTypes.size() == 0 ||
      localVarConsumeHttpContentTypes.find(utility::conversions::to_string_t(
          "application/json")) != localVarConsumeHttpContentTypes.end()) {
    localVarRequestHttpContentType =
        utility::conversions::to_string_t("application/json");
    web::json::value localVarJson;

    if (bind_non_EVM_address)
      localVarJson = ModelBase::toJson(*bind_non_EVM_address);

    localVarHttpBody = std::shared_ptr<IHttpBody>(new JsonBody(localVarJson));
  }
  // multipart formdata
  else if (localVarConsumeHttpContentTypes.find(
               utility::conversions::to_string_t("multipart/form-data")) !=
           localVarConsumeHttpContentTypes.end()) {
    localVarRequestHttpContentType =
        utility::conversions::to_string_t("multipart/form-data");
    std::shared_ptr<MultipartFormData> localVarMultipart(new MultipartFormData);

    if (bind_non_EVM_address && (*bind_non_EVM_address).get()) {
      (*bind_non_EVM_address)
          ->toMultipart(localVarMultipart, utility::conversions::to_string_t(
                                               "bind_non_EVM_address"));
    }

    localVarHttpBody = localVarMultipart;
    localVarRequestHttpContentType +=
        utility::conversions::to_string_t("; boundary=") +
        localVarMultipart->getBoundary();
  } else if (localVarConsumeHttpContentTypes.find(
                 utility::conversions::to_string_t(
                     "application/x-www-form-urlencoded")) !=
             localVarConsumeHttpContentTypes.end()) {
    localVarRequestHttpContentType =
        utility::conversions::to_string_t("application/x-www-form-urlencoded");
  } else {
    throw ApiException(415, utility::conversions::to_string_t(
                                "TheAccountRelatedAPIApi->bindAddressUsingPOST "
                                "does not consume any supported media type"));
  }

  return m_ApiClient
      ->callApi(localVarPath, utility::conversions::to_string_t("POST"),
                localVarQueryParams, localVarHttpBody, localVarHeaderParams,
                localVarFormParams, localVarFileParams,
                localVarRequestHttpContentType)
      .then([=](web::http::http_response localVarResponse) {
        if (m_ApiClient->getResponseHandler()) {
          m_ApiClient->getResponseHandler()(localVarResponse.status_code(),
                                            localVarResponse.headers());
        }

        // 1xx - informational : OK
        // 2xx - successful       : OK
        // 3xx - redirection   : OK
        // 4xx - client error  : not OK
        // 5xx - client error  : not OK
        if (localVarResponse.status_code() >= 400) {
          throw ApiException(
              localVarResponse.status_code(),
              utility::conversions::to_string_t(
                  "error calling bindAddressUsingPOST: ") +
                  localVarResponse.reason_phrase(),
              std::make_shared<std::stringstream>(
                  localVarResponse.extract_utf8string(true).get()));
        }

        // check response content type
        if (localVarResponse.headers().has(
                utility::conversions::to_string_t("Content-Type"))) {
          utility::string_t localVarContentType =
              localVarResponse
                  .headers()[utility::conversions::to_string_t("Content-Type")];
          if (localVarContentType.find(localVarResponseHttpContentType) ==
              std::string::npos) {
            throw ApiException(
                500,
                utility::conversions::to_string_t(
                    "error calling bindAddressUsingPOST: unexpected response "
                    "type: ") +
                    localVarContentType,
                std::make_shared<std::stringstream>(
                    localVarResponse.extract_utf8string(true).get()));
          }
        }

        return localVarResponse.extract_string();
      })
      .then([=](utility::string_t localVarResponse) {
        std::shared_ptr<BaseResponseMapstringobject> localVarResult(
            new BaseResponseMapstringobject());

        if (localVarResponseHttpContentType ==
            utility::conversions::to_string_t("application/json")) {
          web::json::value localVarJson =
              web::json::value::parse(localVarResponse);

          ModelBase::fromJson(localVarJson, localVarResult);
        }
        // else if(localVarResponseHttpContentType ==
        // utility::conversions::to_string_t("multipart/form-data"))
        // {
        // TODO multipart response parsing
        // }
        else {
          throw ApiException(500, utility::conversions::to_string_t(
                                      "error calling bindAddressUsingPOST: "
                                      "unsupported response type"));
        }

        return localVarResult;
      });
}
pplx::task<std::shared_ptr<BaseResponseMapstringobject>>
TheAccountRelatedAPIApi::checkSignatureRequestUsingPOST(
    boost::optional<utility::string_t> appKey,
    boost::optional<utility::string_t> expireTime,
    boost::optional<utility::string_t> signature,
    boost::optional<utility::string_t> timestamp,
    boost::optional<std::shared_ptr<OpenAPICheckSignatureDataParameters>>
        check_signature_method) const {

  std::shared_ptr<const ApiConfiguration> localVarApiConfiguration(
      m_ApiClient->getConfiguration());
  utility::string_t localVarPath = utility::conversions::to_string_t(
      "/open/v1/account/checkSignatureRequest");

  std::map<utility::string_t, utility::string_t> localVarQueryParams;
  std::map<utility::string_t, utility::string_t> localVarHeaderParams(
      localVarApiConfiguration->getDefaultHeaders());
  std::map<utility::string_t, utility::string_t> localVarFormParams;
  std::map<utility::string_t, std::shared_ptr<HttpContent>> localVarFileParams;

  std::unordered_set<utility::string_t> localVarResponseHttpContentTypes;
  localVarResponseHttpContentTypes.insert(
      utility::conversions::to_string_t("*/*"));

  utility::string_t localVarResponseHttpContentType;

  // use JSON if possible
  if (localVarResponseHttpContentTypes.size() == 0) {
    localVarResponseHttpContentType =
        utility::conversions::to_string_t("application/json");
  }
  // JSON
  else if (localVarResponseHttpContentTypes.find(
               utility::conversions::to_string_t("application/json")) !=
           localVarResponseHttpContentTypes.end()) {
    localVarResponseHttpContentType =
        utility::conversions::to_string_t("application/json");
  }
  // multipart formdata
  else if (localVarResponseHttpContentTypes.find(
               utility::conversions::to_string_t("multipart/form-data")) !=
           localVarResponseHttpContentTypes.end()) {
    localVarResponseHttpContentType =
        utility::conversions::to_string_t("multipart/form-data");
  } else {
    throw ApiException(
        400, utility::conversions::to_string_t(
                 "TheAccountRelatedAPIApi->checkSignatureRequestUsingPOST does "
                 "not produce any supported media type"));
  }

  localVarHeaderParams[utility::conversions::to_string_t("Accept")] =
      localVarResponseHttpContentType;

  std::unordered_set<utility::string_t> localVarConsumeHttpContentTypes;
  localVarConsumeHttpContentTypes.insert(
      utility::conversions::to_string_t("application/json"));

  if (appKey) {
    localVarHeaderParams[utility::conversions::to_string_t("appKey")] =
        ApiClient::parameterToString(*appKey);
  }
  if (expireTime) {
    localVarHeaderParams[utility::conversions::to_string_t("expireTime")] =
        ApiClient::parameterToString(*expireTime);
  }
  if (signature) {
    localVarHeaderParams[utility::conversions::to_string_t("signature")] =
        ApiClient::parameterToString(*signature);
  }
  if (timestamp) {
    localVarHeaderParams[utility::conversions::to_string_t("timestamp")] =
        ApiClient::parameterToString(*timestamp);
  }

  std::shared_ptr<IHttpBody> localVarHttpBody;
  utility::string_t localVarRequestHttpContentType;

  // use JSON if possible
  if (localVarConsumeHttpContentTypes.size() == 0 ||
      localVarConsumeHttpContentTypes.find(utility::conversions::to_string_t(
          "application/json")) != localVarConsumeHttpContentTypes.end()) {
    localVarRequestHttpContentType =
        utility::conversions::to_string_t("application/json");
    web::json::value localVarJson;

    if (check_signature_method)
      localVarJson = ModelBase::toJson(*check_signature_method);

    localVarHttpBody = std::shared_ptr<IHttpBody>(new JsonBody(localVarJson));
  }
  // multipart formdata
  else if (localVarConsumeHttpContentTypes.find(
               utility::conversions::to_string_t("multipart/form-data")) !=
           localVarConsumeHttpContentTypes.end()) {
    localVarRequestHttpContentType =
        utility::conversions::to_string_t("multipart/form-data");
    std::shared_ptr<MultipartFormData> localVarMultipart(new MultipartFormData);

    if (check_signature_method && (*check_signature_method).get()) {
      (*check_signature_method)
          ->toMultipart(localVarMultipart, utility::conversions::to_string_t(
                                               "check_signature_method"));
    }

    localVarHttpBody = localVarMultipart;
    localVarRequestHttpContentType +=
        utility::conversions::to_string_t("; boundary=") +
        localVarMultipart->getBoundary();
  } else if (localVarConsumeHttpContentTypes.find(
                 utility::conversions::to_string_t(
                     "application/x-www-form-urlencoded")) !=
             localVarConsumeHttpContentTypes.end()) {
    localVarRequestHttpContentType =
        utility::conversions::to_string_t("application/x-www-form-urlencoded");
  } else {
    throw ApiException(
        415, utility::conversions::to_string_t(
                 "TheAccountRelatedAPIApi->checkSignatureRequestUsingPOST does "
                 "not consume any supported media type"));
  }

  return m_ApiClient
      ->callApi(localVarPath, utility::conversions::to_string_t("POST"),
                localVarQueryParams, localVarHttpBody, localVarHeaderParams,
                localVarFormParams, localVarFileParams,
                localVarRequestHttpContentType)
      .then([=](web::http::http_response localVarResponse) {
        if (m_ApiClient->getResponseHandler()) {
          m_ApiClient->getResponseHandler()(localVarResponse.status_code(),
                                            localVarResponse.headers());
        }

        // 1xx - informational : OK
        // 2xx - successful       : OK
        // 3xx - redirection   : OK
        // 4xx - client error  : not OK
        // 5xx - client error  : not OK
        if (localVarResponse.status_code() >= 400) {
          throw ApiException(
              localVarResponse.status_code(),
              utility::conversions::to_string_t(
                  "error calling checkSignatureRequestUsingPOST: ") +
                  localVarResponse.reason_phrase(),
              std::make_shared<std::stringstream>(
                  localVarResponse.extract_utf8string(true).get()));
        }

        // check response content type
        if (localVarResponse.headers().has(
                utility::conversions::to_string_t("Content-Type"))) {
          utility::string_t localVarContentType =
              localVarResponse
                  .headers()[utility::conversions::to_string_t("Content-Type")];
          if (localVarContentType.find(localVarResponseHttpContentType) ==
              std::string::npos) {
            throw ApiException(
                500,
                utility::conversions::to_string_t(
                    "error calling checkSignatureRequestUsingPOST: unexpected "
                    "response type: ") +
                    localVarContentType,
                std::make_shared<std::stringstream>(
                    localVarResponse.extract_utf8string(true).get()));
          }
        }

        return localVarResponse.extract_string();
      })
      .then([=](utility::string_t localVarResponse) {
        std::shared_ptr<BaseResponseMapstringobject> localVarResult(
            new BaseResponseMapstringobject());

        if (localVarResponseHttpContentType ==
            utility::conversions::to_string_t("application/json")) {
          web::json::value localVarJson =
              web::json::value::parse(localVarResponse);

          ModelBase::fromJson(localVarJson, localVarResult);
        }
        // else if(localVarResponseHttpContentType ==
        // utility::conversions::to_string_t("multipart/form-data"))
        // {
        // TODO multipart response parsing
        // }
        else {
          throw ApiException(
              500, utility::conversions::to_string_t(
                       "error calling checkSignatureRequestUsingPOST: "
                       "unsupported response type"));
        }

        return localVarResult;
      });
}
pplx::task<std::shared_ptr<BaseResponseMapstringobject>>
TheAccountRelatedAPIApi::getFeeToInfoUsingGET(
    boost::optional<utility::string_t> appKey,
    boost::optional<utility::string_t> expireTime,
    boost::optional<utility::string_t> signature,
    boost::optional<utility::string_t> timestamp) const {

  std::shared_ptr<const ApiConfiguration> localVarApiConfiguration(
      m_ApiClient->getConfiguration());
  utility::string_t localVarPath =
      utility::conversions::to_string_t("/open/v1/account/getFeeToInfo");

  std::map<utility::string_t, utility::string_t> localVarQueryParams;
  std::map<utility::string_t, utility::string_t> localVarHeaderParams(
      localVarApiConfiguration->getDefaultHeaders());
  std::map<utility::string_t, utility::string_t> localVarFormParams;
  std::map<utility::string_t, std::shared_ptr<HttpContent>> localVarFileParams;

  std::unordered_set<utility::string_t> localVarResponseHttpContentTypes;
  localVarResponseHttpContentTypes.insert(
      utility::conversions::to_string_t("*/*"));

  utility::string_t localVarResponseHttpContentType;

  // use JSON if possible
  if (localVarResponseHttpContentTypes.size() == 0) {
    localVarResponseHttpContentType =
        utility::conversions::to_string_t("application/json");
  }
  // JSON
  else if (localVarResponseHttpContentTypes.find(
               utility::conversions::to_string_t("application/json")) !=
           localVarResponseHttpContentTypes.end()) {
    localVarResponseHttpContentType =
        utility::conversions::to_string_t("application/json");
  }
  // multipart formdata
  else if (localVarResponseHttpContentTypes.find(
               utility::conversions::to_string_t("multipart/form-data")) !=
           localVarResponseHttpContentTypes.end()) {
    localVarResponseHttpContentType =
        utility::conversions::to_string_t("multipart/form-data");
  } else {
    throw ApiException(400, utility::conversions::to_string_t(
                                "TheAccountRelatedAPIApi->getFeeToInfoUsingGET "
                                "does not produce any supported media type"));
  }

  localVarHeaderParams[utility::conversions::to_string_t("Accept")] =
      localVarResponseHttpContentType;

  std::unordered_set<utility::string_t> localVarConsumeHttpContentTypes;

  if (appKey) {
    localVarHeaderParams[utility::conversions::to_string_t("appKey")] =
        ApiClient::parameterToString(*appKey);
  }
  if (expireTime) {
    localVarHeaderParams[utility::conversions::to_string_t("expireTime")] =
        ApiClient::parameterToString(*expireTime);
  }
  if (signature) {
    localVarHeaderParams[utility::conversions::to_string_t("signature")] =
        ApiClient::parameterToString(*signature);
  }
  if (timestamp) {
    localVarHeaderParams[utility::conversions::to_string_t("timestamp")] =
        ApiClient::parameterToString(*timestamp);
  }

  std::shared_ptr<IHttpBody> localVarHttpBody;
  utility::string_t localVarRequestHttpContentType;

  // use JSON if possible
  if (localVarConsumeHttpContentTypes.size() == 0 ||
      localVarConsumeHttpContentTypes.find(utility::conversions::to_string_t(
          "application/json")) != localVarConsumeHttpContentTypes.end()) {
    localVarRequestHttpContentType =
        utility::conversions::to_string_t("application/json");
  }
  // multipart formdata
  else if (localVarConsumeHttpContentTypes.find(
               utility::conversions::to_string_t("multipart/form-data")) !=
           localVarConsumeHttpContentTypes.end()) {
    localVarRequestHttpContentType =
        utility::conversions::to_string_t("multipart/form-data");
  } else if (localVarConsumeHttpContentTypes.find(
                 utility::conversions::to_string_t(
                     "application/x-www-form-urlencoded")) !=
             localVarConsumeHttpContentTypes.end()) {
    localVarRequestHttpContentType =
        utility::conversions::to_string_t("application/x-www-form-urlencoded");
  } else {
    throw ApiException(415, utility::conversions::to_string_t(
                                "TheAccountRelatedAPIApi->getFeeToInfoUsingGET "
                                "does not consume any supported media type"));
  }

  return m_ApiClient
      ->callApi(localVarPath, utility::conversions::to_string_t("GET"),
                localVarQueryParams, localVarHttpBody, localVarHeaderParams,
                localVarFormParams, localVarFileParams,
                localVarRequestHttpContentType)
      .then([=](web::http::http_response localVarResponse) {
        if (m_ApiClient->getResponseHandler()) {
          m_ApiClient->getResponseHandler()(localVarResponse.status_code(),
                                            localVarResponse.headers());
        }

        // 1xx - informational : OK
        // 2xx - successful       : OK
        // 3xx - redirection   : OK
        // 4xx - client error  : not OK
        // 5xx - client error  : not OK
        if (localVarResponse.status_code() >= 400) {
          throw ApiException(
              localVarResponse.status_code(),
              utility::conversions::to_string_t(
                  "error calling getFeeToInfoUsingGET: ") +
                  localVarResponse.reason_phrase(),
              std::make_shared<std::stringstream>(
                  localVarResponse.extract_utf8string(true).get()));
        }

        // check response content type
        if (localVarResponse.headers().has(
                utility::conversions::to_string_t("Content-Type"))) {
          utility::string_t localVarContentType =
              localVarResponse
                  .headers()[utility::conversions::to_string_t("Content-Type")];
          if (localVarContentType.find(localVarResponseHttpContentType) ==
              std::string::npos) {
            throw ApiException(
                500,
                utility::conversions::to_string_t(
                    "error calling getFeeToInfoUsingGET: unexpected response "
                    "type: ") +
                    localVarContentType,
                std::make_shared<std::stringstream>(
                    localVarResponse.extract_utf8string(true).get()));
          }
        }

        return localVarResponse.extract_string();
      })
      .then([=](utility::string_t localVarResponse) {
        std::shared_ptr<BaseResponseMapstringobject> localVarResult(
            new BaseResponseMapstringobject());

        if (localVarResponseHttpContentType ==
            utility::conversions::to_string_t("application/json")) {
          web::json::value localVarJson =
              web::json::value::parse(localVarResponse);

          ModelBase::fromJson(localVarJson, localVarResult);
        }
        // else if(localVarResponseHttpContentType ==
        // utility::conversions::to_string_t("multipart/form-data"))
        // {
        // TODO multipart response parsing
        // }
        else {
          throw ApiException(500, utility::conversions::to_string_t(
                                      "error calling getFeeToInfoUsingGET: "
                                      "unsupported response type"));
        }

        return localVarResult;
      });
}
pplx::task<std::shared_ptr<BaseResponseMapstringobject>>
TheAccountRelatedAPIApi::setFeeToInfoUsingPOST(
    boost::optional<utility::string_t> appKey,
    boost::optional<utility::string_t> expireTime,
    boost::optional<utility::string_t> signature,
    boost::optional<utility::string_t> timestamp,
    boost::optional<std::shared_ptr<OpenBindAddressParameter>>
        set_fee_to_address) const {

  std::shared_ptr<const ApiConfiguration> localVarApiConfiguration(
      m_ApiClient->getConfiguration());
  utility::string_t localVarPath =
      utility::conversions::to_string_t("/open/v1/account/setFeeToInfo");

  std::map<utility::string_t, utility::string_t> localVarQueryParams;
  std::map<utility::string_t, utility::string_t> localVarHeaderParams(
      localVarApiConfiguration->getDefaultHeaders());
  std::map<utility::string_t, utility::string_t> localVarFormParams;
  std::map<utility::string_t, std::shared_ptr<HttpContent>> localVarFileParams;

  std::unordered_set<utility::string_t> localVarResponseHttpContentTypes;
  localVarResponseHttpContentTypes.insert(
      utility::conversions::to_string_t("*/*"));

  utility::string_t localVarResponseHttpContentType;

  // use JSON if possible
  if (localVarResponseHttpContentTypes.size() == 0) {
    localVarResponseHttpContentType =
        utility::conversions::to_string_t("application/json");
  }
  // JSON
  else if (localVarResponseHttpContentTypes.find(
               utility::conversions::to_string_t("application/json")) !=
           localVarResponseHttpContentTypes.end()) {
    localVarResponseHttpContentType =
        utility::conversions::to_string_t("application/json");
  }
  // multipart formdata
  else if (localVarResponseHttpContentTypes.find(
               utility::conversions::to_string_t("multipart/form-data")) !=
           localVarResponseHttpContentTypes.end()) {
    localVarResponseHttpContentType =
        utility::conversions::to_string_t("multipart/form-data");
  } else {
    throw ApiException(400,
                       utility::conversions::to_string_t(
                           "TheAccountRelatedAPIApi->setFeeToInfoUsingPOST "
                           "does not produce any supported media type"));
  }

  localVarHeaderParams[utility::conversions::to_string_t("Accept")] =
      localVarResponseHttpContentType;

  std::unordered_set<utility::string_t> localVarConsumeHttpContentTypes;
  localVarConsumeHttpContentTypes.insert(
      utility::conversions::to_string_t("application/json"));

  if (appKey) {
    localVarHeaderParams[utility::conversions::to_string_t("appKey")] =
        ApiClient::parameterToString(*appKey);
  }
  if (expireTime) {
    localVarHeaderParams[utility::conversions::to_string_t("expireTime")] =
        ApiClient::parameterToString(*expireTime);
  }
  if (signature) {
    localVarHeaderParams[utility::conversions::to_string_t("signature")] =
        ApiClient::parameterToString(*signature);
  }
  if (timestamp) {
    localVarHeaderParams[utility::conversions::to_string_t("timestamp")] =
        ApiClient::parameterToString(*timestamp);
  }

  std::shared_ptr<IHttpBody> localVarHttpBody;
  utility::string_t localVarRequestHttpContentType;

  // use JSON if possible
  if (localVarConsumeHttpContentTypes.size() == 0 ||
      localVarConsumeHttpContentTypes.find(utility::conversions::to_string_t(
          "application/json")) != localVarConsumeHttpContentTypes.end()) {
    localVarRequestHttpContentType =
        utility::conversions::to_string_t("application/json");
    web::json::value localVarJson;

    if (set_fee_to_address)
      localVarJson = ModelBase::toJson(*set_fee_to_address);

    localVarHttpBody = std::shared_ptr<IHttpBody>(new JsonBody(localVarJson));
  }
  // multipart formdata
  else if (localVarConsumeHttpContentTypes.find(
               utility::conversions::to_string_t("multipart/form-data")) !=
           localVarConsumeHttpContentTypes.end()) {
    localVarRequestHttpContentType =
        utility::conversions::to_string_t("multipart/form-data");
    std::shared_ptr<MultipartFormData> localVarMultipart(new MultipartFormData);

    if (set_fee_to_address && (*set_fee_to_address).get()) {
      (*set_fee_to_address)
          ->toMultipart(localVarMultipart, utility::conversions::to_string_t(
                                               "set_fee_to_address"));
    }

    localVarHttpBody = localVarMultipart;
    localVarRequestHttpContentType +=
        utility::conversions::to_string_t("; boundary=") +
        localVarMultipart->getBoundary();
  } else if (localVarConsumeHttpContentTypes.find(
                 utility::conversions::to_string_t(
                     "application/x-www-form-urlencoded")) !=
             localVarConsumeHttpContentTypes.end()) {
    localVarRequestHttpContentType =
        utility::conversions::to_string_t("application/x-www-form-urlencoded");
  } else {
    throw ApiException(415,
                       utility::conversions::to_string_t(
                           "TheAccountRelatedAPIApi->setFeeToInfoUsingPOST "
                           "does not consume any supported media type"));
  }

  return m_ApiClient
      ->callApi(localVarPath, utility::conversions::to_string_t("POST"),
                localVarQueryParams, localVarHttpBody, localVarHeaderParams,
                localVarFormParams, localVarFileParams,
                localVarRequestHttpContentType)
      .then([=](web::http::http_response localVarResponse) {
        if (m_ApiClient->getResponseHandler()) {
          m_ApiClient->getResponseHandler()(localVarResponse.status_code(),
                                            localVarResponse.headers());
        }

        // 1xx - informational : OK
        // 2xx - successful       : OK
        // 3xx - redirection   : OK
        // 4xx - client error  : not OK
        // 5xx - client error  : not OK
        if (localVarResponse.status_code() >= 400) {
          throw ApiException(
              localVarResponse.status_code(),
              utility::conversions::to_string_t(
                  "error calling setFeeToInfoUsingPOST: ") +
                  localVarResponse.reason_phrase(),
              std::make_shared<std::stringstream>(
                  localVarResponse.extract_utf8string(true).get()));
        }

        // check response content type
        if (localVarResponse.headers().has(
                utility::conversions::to_string_t("Content-Type"))) {
          utility::string_t localVarContentType =
              localVarResponse
                  .headers()[utility::conversions::to_string_t("Content-Type")];
          if (localVarContentType.find(localVarResponseHttpContentType) ==
              std::string::npos) {
            throw ApiException(
                500,
                utility::conversions::to_string_t(
                    "error calling setFeeToInfoUsingPOST: unexpected response "
                    "type: ") +
                    localVarContentType,
                std::make_shared<std::stringstream>(
                    localVarResponse.extract_utf8string(true).get()));
          }
        }

        return localVarResponse.extract_string();
      })
      .then([=](utility::string_t localVarResponse) {
        std::shared_ptr<BaseResponseMapstringobject> localVarResult(
            new BaseResponseMapstringobject());

        if (localVarResponseHttpContentType ==
            utility::conversions::to_string_t("application/json")) {
          web::json::value localVarJson =
              web::json::value::parse(localVarResponse);

          ModelBase::fromJson(localVarJson, localVarResult);
        }
        // else if(localVarResponseHttpContentType ==
        // utility::conversions::to_string_t("multipart/form-data"))
        // {
        // TODO multipart response parsing
        // }
        else {
          throw ApiException(500, utility::conversions::to_string_t(
                                      "error calling setFeeToInfoUsingPOST: "
                                      "unsupported response type"));
        }

        return localVarResult;
      });
}

} // namespace api
} // namespace client
} // namespace openapitools
} // namespace org
