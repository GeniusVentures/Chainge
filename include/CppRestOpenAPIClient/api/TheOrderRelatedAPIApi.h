/**
 * Open API
 * Open API
 *
 * The version of the OpenAPI document: 1.0
 * Contact: liuxiaobin@chainge.finance
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.5.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * TheOrderRelatedAPIApi.h
 *
 *
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_API_TheOrderRelatedAPIApi_H_
#define ORG_OPENAPITOOLS_CLIENT_API_TheOrderRelatedAPIApi_H_

#include "CppRestOpenAPIClient/ApiClient.h"

#include "CppRestOpenAPIClient/Object.h"
#include "CppRestOpenAPIClient/model/BaseResponseMapstringobject.h"
#include "CppRestOpenAPIClient/model/OpenAPIAndAppSubmissionToObtainAggregate.h"
#include "CppRestOpenAPIClient/model/OpenAPIAndAppSubmitAggregateOrder.h"
#include "CppRestOpenAPIClient/model/OpenAPIAndAppSubmitCrossChainOrder.h"
#include "CppRestOpenAPIClient/model/OpenAPIAndAppSubmitOrder.h"
#include "CppRestOpenAPIClient/model/OpenAPIAndChainSubmitCheckProxyOrder.h"
#include "CppRestOpenAPIClient/model/OpenAPICrossChainInquiryParameters.h"
#include "CppRestOpenAPIClient/model/OpenAPIInquiryParameters.h"
#include <boost/optional.hpp>
#include <cpprest/details/basic_types.h>
#include <map>

namespace org {
namespace openapitools {
namespace client {
namespace api {

using namespace org::openapitools::client::model;

class TheOrderRelatedAPIApi {
public:
  explicit TheOrderRelatedAPIApi(std::shared_ptr<const ApiClient> apiClient);

  virtual ~TheOrderRelatedAPIApi();

  /// <summary>
  /// Check Proxy Task
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  /// <param name="appKey">appKey (optional, default to
  /// utility::conversions::to_string_t(&quot;&quot;))</param> <param
  /// name="expireTime">expireTime (optional, default to
  /// utility::conversions::to_string_t(&quot;&quot;))</param> <param
  /// name="signature">signature (optional, default to
  /// utility::conversions::to_string_t(&quot;&quot;))</param> <param
  /// name="timestamp">timestamp (optional, default to
  /// utility::conversions::to_string_t(&quot;&quot;))</param> <param
  /// name="check_Proxy_Task_params">JSON Data (optional)</param>
  pplx::task<std::shared_ptr<BaseResponseMapstringobject>>
  checkProxyTaskUsingPOST(
      boost::optional<utility::string_t> appKey,
      boost::optional<utility::string_t> expireTime,
      boost::optional<utility::string_t> signature,
      boost::optional<utility::string_t> timestamp,
      boost::optional<std::shared_ptr<OpenAPIAndChainSubmitCheckProxyOrder>>
          check_Proxy_Task_params) const;
  /// <summary>
  /// Get aggregate quote
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  /// <param name="appKey">appKey (optional, default to
  /// utility::conversions::to_string_t(&quot;&quot;))</param> <param
  /// name="expireTime">expireTime (optional, default to
  /// utility::conversions::to_string_t(&quot;&quot;))</param> <param
  /// name="signature">signature (optional, default to
  /// utility::conversions::to_string_t(&quot;&quot;))</param> <param
  /// name="timestamp">timestamp (optional, default to
  /// utility::conversions::to_string_t(&quot;&quot;))</param> <param
  /// name="get_aggregate_quote">JSON Data (optional)</param>
  pplx::task<std::shared_ptr<BaseResponseMapstringobject>>
  getAggregateQuoteUsingPOST(
      boost::optional<utility::string_t> appKey,
      boost::optional<utility::string_t> expireTime,
      boost::optional<utility::string_t> signature,
      boost::optional<utility::string_t> timestamp,
      boost::optional<std::shared_ptr<OpenAPIInquiryParameters>>
          get_aggregate_quote) const;
  /// <summary>
  /// Get cross chain quote
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  /// <param name="appKey">appKey (optional, default to
  /// utility::conversions::to_string_t(&quot;&quot;))</param> <param
  /// name="expireTime">expireTime (optional, default to
  /// utility::conversions::to_string_t(&quot;&quot;))</param> <param
  /// name="signature">signature (optional, default to
  /// utility::conversions::to_string_t(&quot;&quot;))</param> <param
  /// name="timestamp">timestamp (optional, default to
  /// utility::conversions::to_string_t(&quot;&quot;))</param> <param
  /// name="get_cross_chain_quote">JSON Data (optional)</param>
  pplx::task<std::shared_ptr<BaseResponseMapstringobject>>
  getCrossChainQuoteUsingPOST(
      boost::optional<utility::string_t> appKey,
      boost::optional<utility::string_t> expireTime,
      boost::optional<utility::string_t> signature,
      boost::optional<utility::string_t> timestamp,
      boost::optional<std::shared_ptr<OpenAPICrossChainInquiryParameters>>
          get_cross_chain_quote) const;
  /// <summary>
  /// Get orderDetail by hash and evmAddress
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  /// <param name="chain">chain</param>
  /// <param name="evmAddress">evmAddress</param>
  /// <param name="hash">hash</param>
  /// <param name="appKey">appKey (optional, default to
  /// utility::conversions::to_string_t(&quot;&quot;))</param> <param
  /// name="expireTime">expireTime (optional, default to
  /// utility::conversions::to_string_t(&quot;&quot;))</param> <param
  /// name="signature">signature (optional, default to
  /// utility::conversions::to_string_t(&quot;&quot;))</param> <param
  /// name="timestamp">timestamp (optional, default to
  /// utility::conversions::to_string_t(&quot;&quot;))</param>
  pplx::task<std::shared_ptr<BaseResponseMapstringobject>>
  getOrderDetailByHashAndEvmAddressUsingGET(
      utility::string_t chain, utility::string_t evmAddress,
      utility::string_t hash, boost::optional<utility::string_t> appKey,
      boost::optional<utility::string_t> expireTime,
      boost::optional<utility::string_t> signature,
      boost::optional<utility::string_t> timestamp) const;
  /// <summary>
  /// Get orderDetail
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  /// <param name="sn">sn</param>
  /// <param name="appKey">appKey (optional, default to
  /// utility::conversions::to_string_t(&quot;&quot;))</param> <param
  /// name="expireTime">expireTime (optional, default to
  /// utility::conversions::to_string_t(&quot;&quot;))</param> <param
  /// name="signature">signature (optional, default to
  /// utility::conversions::to_string_t(&quot;&quot;))</param> <param
  /// name="timestamp">timestamp (optional, default to
  /// utility::conversions::to_string_t(&quot;&quot;))</param>
  pplx::task<std::shared_ptr<BaseResponseMapstringobject>>
  getOrderDetailUsingGET(utility::string_t sn,
                         boost::optional<utility::string_t> appKey,
                         boost::optional<utility::string_t> expireTime,
                         boost::optional<utility::string_t> signature,
                         boost::optional<utility::string_t> timestamp) const;
  /// <summary>
  /// Get order list by order address
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  /// <param name="evmAddress">evmAddress</param>
  /// <param name="appKey">appKey (optional, default to
  /// utility::conversions::to_string_t(&quot;&quot;))</param> <param
  /// name="expireTime">expireTime (optional, default to
  /// utility::conversions::to_string_t(&quot;&quot;))</param> <param
  /// name="pageNum">pageNum (optional, default to 0)</param> <param
  /// name="pageSize">pageSize (optional, default to 0)</param> <param
  /// name="signature">signature (optional, default to
  /// utility::conversions::to_string_t(&quot;&quot;))</param> <param
  /// name="timestamp">timestamp (optional, default to
  /// utility::conversions::to_string_t(&quot;&quot;))</param>
  pplx::task<std::shared_ptr<BaseResponseMapstringobject>>
  getOrderListByAddressUsingGET(
      utility::string_t evmAddress, boost::optional<utility::string_t> appKey,
      boost::optional<utility::string_t> expireTime,
      boost::optional<int32_t> pageNum, boost::optional<int32_t> pageSize,
      boost::optional<utility::string_t> signature,
      boost::optional<utility::string_t> timestamp) const;
  /// <summary>
  /// get quote extend
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  /// <param name="appKey">appKey (optional, default to
  /// utility::conversions::to_string_t(&quot;&quot;))</param> <param
  /// name="expireTime">expireTime (optional, default to
  /// utility::conversions::to_string_t(&quot;&quot;))</param> <param
  /// name="signature">signature (optional, default to
  /// utility::conversions::to_string_t(&quot;&quot;))</param> <param
  /// name="timestamp">timestamp (optional, default to
  /// utility::conversions::to_string_t(&quot;&quot;))</param> <param
  /// name="get_quote_extend">JSON Data (optional)</param>
  pplx::task<std::shared_ptr<BaseResponseMapstringobject>>
  getQuoteExtendUsingPOST(
      boost::optional<utility::string_t> appKey,
      boost::optional<utility::string_t> expireTime,
      boost::optional<utility::string_t> signature,
      boost::optional<utility::string_t> timestamp,
      boost::optional<std::shared_ptr<OpenAPIInquiryParameters>>
          get_quote_extend) const;
  /// <summary>
  /// Get transfer to minter params
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  /// <param name="appKey">appKey (optional, default to
  /// utility::conversions::to_string_t(&quot;&quot;))</param> <param
  /// name="expireTime">expireTime (optional, default to
  /// utility::conversions::to_string_t(&quot;&quot;))</param> <param
  /// name="signature">signature (optional, default to
  /// utility::conversions::to_string_t(&quot;&quot;))</param> <param
  /// name="timestamp">timestamp (optional, default to
  /// utility::conversions::to_string_t(&quot;&quot;))</param> <param
  /// name="get_transfer_to_minter_params">JSON Data (optional)</param>
  pplx::task<std::shared_ptr<BaseResponseMapstringobject>>
  getTransferToMinterParamsUsingPOST(
      boost::optional<utility::string_t> appKey,
      boost::optional<utility::string_t> expireTime,
      boost::optional<utility::string_t> signature,
      boost::optional<utility::string_t> timestamp,
      boost::optional<std::shared_ptr<OpenAPIAndAppSubmissionToObtainAggregate>>
          get_transfer_to_minter_params) const;
  /// <summary>
  /// Get transfer to minter raw
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  /// <param name="appKey">appKey (optional, default to
  /// utility::conversions::to_string_t(&quot;&quot;))</param> <param
  /// name="expireTime">expireTime (optional, default to
  /// utility::conversions::to_string_t(&quot;&quot;))</param> <param
  /// name="signature">signature (optional, default to
  /// utility::conversions::to_string_t(&quot;&quot;))</param> <param
  /// name="timestamp">timestamp (optional, default to
  /// utility::conversions::to_string_t(&quot;&quot;))</param> <param
  /// name="get_transfer_to_minter_raw">JSON Data (optional)</param>
  pplx::task<std::shared_ptr<BaseResponseMapstringobject>>
  getTransferToMinterRawUsingPOST(
      boost::optional<utility::string_t> appKey,
      boost::optional<utility::string_t> expireTime,
      boost::optional<utility::string_t> signature,
      boost::optional<utility::string_t> timestamp,
      boost::optional<std::shared_ptr<OpenAPIAndAppSubmissionToObtainAggregate>>
          get_transfer_to_minter_raw) const;
  /// <summary>
  /// Submit aggregate order
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  /// <param name="appKey">appKey (optional, default to
  /// utility::conversions::to_string_t(&quot;&quot;))</param> <param
  /// name="expireTime">expireTime (optional, default to
  /// utility::conversions::to_string_t(&quot;&quot;))</param> <param
  /// name="signature">signature (optional, default to
  /// utility::conversions::to_string_t(&quot;&quot;))</param> <param
  /// name="timestamp">timestamp (optional, default to
  /// utility::conversions::to_string_t(&quot;&quot;))</param> <param
  /// name="submit_aggregate_order">传入json格式 (optional)</param>
  pplx::task<std::shared_ptr<BaseResponseMapstringobject>>
  submitAggregateUsingPOST(
      boost::optional<utility::string_t> appKey,
      boost::optional<utility::string_t> expireTime,
      boost::optional<utility::string_t> signature,
      boost::optional<utility::string_t> timestamp,
      boost::optional<std::shared_ptr<OpenAPIAndAppSubmitAggregateOrder>>
          submit_aggregate_order) const;
  /// <summary>
  /// Submit cross chain order
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  /// <param name="appKey">appKey (optional, default to
  /// utility::conversions::to_string_t(&quot;&quot;))</param> <param
  /// name="expireTime">expireTime (optional, default to
  /// utility::conversions::to_string_t(&quot;&quot;))</param> <param
  /// name="signature">signature (optional, default to
  /// utility::conversions::to_string_t(&quot;&quot;))</param> <param
  /// name="timestamp">timestamp (optional, default to
  /// utility::conversions::to_string_t(&quot;&quot;))</param> <param
  /// name="submit_cross_chain_order">JSON Data (optional)</param>
  pplx::task<std::shared_ptr<BaseResponseMapstringobject>>
  submitCrossChainUsingPOST(
      boost::optional<utility::string_t> appKey,
      boost::optional<utility::string_t> expireTime,
      boost::optional<utility::string_t> signature,
      boost::optional<utility::string_t> timestamp,
      boost::optional<std::shared_ptr<OpenAPIAndAppSubmitCrossChainOrder>>
          submit_cross_chain_order) const;
  /// <summary>
  /// Submit order extend
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  /// <param name="appKey">appKey (optional, default to
  /// utility::conversions::to_string_t(&quot;&quot;))</param> <param
  /// name="expireTime">expireTime (optional, default to
  /// utility::conversions::to_string_t(&quot;&quot;))</param> <param
  /// name="signature">signature (optional, default to
  /// utility::conversions::to_string_t(&quot;&quot;))</param> <param
  /// name="timestamp">timestamp (optional, default to
  /// utility::conversions::to_string_t(&quot;&quot;))</param> <param
  /// name="submit_order_extend">JSON Data (optional)</param>
  pplx::task<std::shared_ptr<BaseResponseMapstringobject>>
  submitOrderExtendUsingPOST(
      boost::optional<utility::string_t> appKey,
      boost::optional<utility::string_t> expireTime,
      boost::optional<utility::string_t> signature,
      boost::optional<utility::string_t> timestamp,
      boost::optional<std::shared_ptr<OpenAPIAndAppSubmitOrder>>
          submit_order_extend) const;
  /// <summary>
  /// Submit Proxy Task
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  /// <param name="appKey">appKey (optional, default to
  /// utility::conversions::to_string_t(&quot;&quot;))</param> <param
  /// name="expireTime">expireTime (optional, default to
  /// utility::conversions::to_string_t(&quot;&quot;))</param> <param
  /// name="signature">signature (optional, default to
  /// utility::conversions::to_string_t(&quot;&quot;))</param> <param
  /// name="timestamp">timestamp (optional, default to
  /// utility::conversions::to_string_t(&quot;&quot;))</param> <param
  /// name="submit_Proxy_Task_params">JSON Data (optional)</param>
  pplx::task<std::shared_ptr<BaseResponseMapstringobject>>
  submitProxyTaskUsingPOST(
      boost::optional<utility::string_t> appKey,
      boost::optional<utility::string_t> expireTime,
      boost::optional<utility::string_t> signature,
      boost::optional<utility::string_t> timestamp,
      boost::optional<std::map<utility::string_t, std::shared_ptr<Object>>>
          submit_Proxy_Task_params) const;

protected:
  std::shared_ptr<const ApiClient> m_ApiClient;
};

} // namespace api
} // namespace client
} // namespace openapitools
} // namespace org

#endif /* ORG_OPENAPITOOLS_CLIENT_API_TheOrderRelatedAPIApi_H_ */
